import { useEffect, useRef } from 'react'

interface ConstellationViewProps {
  entries: any[]
  links: any[]
  onEntryClick: (entry: any) => void
  getTypeConfig: (type: string) => any
}

export default function ConstellationView({ entries, links, onEntryClick, getTypeConfig }: ConstellationViewProps) {
  const svgRef = useRef<SVGSVGElement>(null)
  const width = 800
  const height = 500
  const centerX = width / 2
  const centerY = height / 2
  const radius = 180

  // Calculer les positions des entrées en cercle
  const entryPositions = entries.map((entry, index) => {
    const angle = (index / entries.length) * 2 * Math.PI - Math.PI / 2
    return {
      ...entry,
      x: centerX + radius * Math.cos(angle),
      y: centerY + radius * Math.sin(angle),
      angle
    }
  })

  // Fonction pour trouver la position d'une entrée
  const findPosition = (id: string, type: string) => {
    return entryPositions.find(e => e.id === id && e.type === type)
  }

  return (
    <div style={{
      background: 'white',
      borderRadius: '1rem',
      padding: '2rem',
      minHeight: '600px',
      position: 'relative',
      overflow: 'hidden'
    }}>
      <div style={{
        background: 'linear-gradient(135deg, #e0e7ff, #ddd6fe)',
        borderRadius: '0.75rem',
        padding: '1rem',
        marginBottom: '1.5rem',
        textAlign: 'center'
      }}>
        <h3 style={{ color: '#7c3aed', marginBottom: '0.5rem' }}>Constellation spirituelle</h3>
        <p style={{ color: '#6b7280', fontSize: '0.875rem' }}>
          Visualisez les liens tissés par l'Esprit Saint entre les moments de votre vie
        </p>
      </div>

      <svg
        ref={svgRef}
        width={width}
        height={height}
        style={{ display: 'block', margin: '0 auto' }}
      >
        <defs>
          <linearGradient id="linkGradient" x1="0%" y1="0%" x2="100%" y2="0%">
            <stop offset="0%" stopColor="#a855f7" stopOpacity="0.3" />
            <stop offset="50%" stopColor="#7c3aed" stopOpacity="0.5" />
            <stop offset="100%" stopColor="#a855f7" stopOpacity="0.3" />
          </linearGradient>
        </defs>

        {/* Dessiner les liens */}
        {links.map((link, index) => {
          const source = findPosition(link.element_source_id, link.element_source_type)
          const target = findPosition(link.element_cible_id, link.element_cible_type)
          
          if (!source || !target) return null
          
          // Calculer la courbe de Bézier
          const dx = target.x - source.x
          const dy = target.y - source.y
          const dr = Math.sqrt(dx * dx + dy * dy)
          
          return (
            <g key={link.id}>
              <path
                d={`M ${source.x} ${source.y} Q ${centerX} ${centerY} ${target.x} ${target.y}`}
                fill="none"
                stroke="url(#linkGradient)"
                strokeWidth="2"
                opacity="0.6"
              />
              {/* Flèche au milieu */}
              <circle
                cx={(source.x + target.x) / 2}
                cy={(source.y + target.y) / 2}
                r="3"
                fill="#7c3aed"
                opacity="0.8"
              />
            </g>
          )
        })}

        {/* Dessiner les nœuds */}
        {entryPositions.map((entry, index) => {
          const config = getTypeConfig(entry.type)
          const hasLinks = links.some(l => 
            (l.element_source_id === entry.id && l.element_source_type === entry.type) ||
            (l.element_cible_id === entry.id && l.element_cible_type === entry.type)
          )
          
          return (
            <g 
              key={entry.id}
              style={{ cursor: 'pointer' }}
              onClick={() => onEntryClick(entry)}
            >
              {/* Halo pour les éléments avec liens */}
              {hasLinks && (
                <circle
                  cx={entry.x}
                  cy={entry.y}
                  r="30"
                  fill={config.color}
                  opacity="0.2"
                />
              )}
              
              <circle
                cx={entry.x}
                cy={entry.y}
                r={hasLinks ? 25 : 20}
                fill={config.color}
                stroke="white"
                strokeWidth="3"
              />
              
              {/* Icône ou emoji */}
              <text
                x={entry.x}
                y={entry.y + 5}
                textAnchor="middle"
                fill="white"
                fontSize="16"
                fontWeight="bold"
              >
                {entry.type[0].toUpperCase()}
              </text>
              
              {/* Label */}
              <text
                x={entry.x}
                y={entry.y + 45}
                textAnchor="middle"
                fill="#4b5563"
                fontSize="12"
                fontWeight="500"
              >
                {config.label}
              </text>
              
              {/* Nombre de liens */}
              {entry.linksCount > 0 && (
                <>
                  <circle
                    cx={entry.x + 15}
                    cy={entry.y - 15}
                    r="10"
                    fill="#a855f7"
                    stroke="white"
                    strokeWidth="2"
                  />
                  <text
                    x={entry.x + 15}
                    y={entry.y - 10}
                    textAnchor="middle"
                    fill="white"
                    fontSize="11"
                    fontWeight="bold"
                  >
                    {entry.linksCount}
                  </text>
                </>
              )}
            </g>
          )
        })}
      </svg>

      {/* Légende */}
      <div style={{
        marginTop: '2rem',
        padding: '1rem',
        background: '#f9fafb',
        borderRadius: '0.5rem',
        display: 'flex',
        justifyContent: 'center',
        gap: '2rem',
        flexWrap: 'wrap'
      }}>
        {Object.entries({
          'exauce': 'Exaucement',
          'accomplit': 'Accomplissement',
          'decoule': 'Découle de',
          'eclaire': 'Éclaire',
          'echo': 'Fait écho'
        }).map(([type, label]) => (
          <div key={type} style={{ fontSize: '0.875rem', color: '#6b7280' }}>
            <span style={{
              display: 'inline-block',
              width: '20px',
              height: '2px',
              background: '#a855f7',
              marginRight: '0.5rem',
              verticalAlign: 'middle'
            }} />
            {label}
          </div>
        ))}
      </div>
    </div>
  )
}