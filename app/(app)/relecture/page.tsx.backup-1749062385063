'use client'

import { useState, useEffect } from 'react'
import { supabase } from '@/app/lib/supabase'
import Link from 'next/link'
import { ArrowLeft, Sparkles, Heart, BookOpen, Users, MessageSquare, Filter, Calendar, ChevronRight, Eye, Lightbulb, Zap, Link as LinkIcon, Compass, Cross, Church, Flower, Star, Check } from 'lucide-react'
import { format, parseISO, isWithinInterval, subMonths, differenceInDays } from 'date-fns'
import { fr } from 'date-fns/locale'

import ConstellationView from '@/app/components/ConstellationView'

export default function RelecturePage() {
  const [loading, setLoading] = useState(true)
  const [entries, setEntries] = useState<any[]>([])
  const [filteredEntries, setFilteredEntries] = useState<any[]>([])
  const [selectedPeriod, setSelectedPeriod] = useState('3months')
  const [selectedTypes, setSelectedTypes] = useState<string[]>(['all'])
  const [showSuggestions, setShowSuggestions] = useState(true)
  const [expandedEntry, setExpandedEntry] = useState<string | null>(null)
  const [error, setError] = useState<string | null>(null)
  const [viewMode, setViewMode] = useState<'chronologique' | 'thematique' | 'consolations' | 'jardin' | 'fleuve' | 'constellation'>('chronologique')
  const [showLinkModal, setShowLinkModal] = useState(false)
  const [selectedEntryForLink, setSelectedEntryForLink] = useState<any>(null)
  const [possibleLinks, setPossibleLinks] = useState<any[]>([])
  const [linkMode, setLinkMode] = useState(false)
  const [firstSelectedEntry, setFirstSelectedEntry] = useState<any>(null)
  const [spiritualLinks, setSpiritualLinks] = useState<any[]>([])
  const [hoveredEntry, setHoveredEntry] = useState<any>(null)

  useEffect(() => {
    loadAllEntries()
  }, [])

  useEffect(() => {
    filterEntries()
  }, [entries, selectedPeriod, selectedTypes])

  async function loadAllEntries() {
    try {
      const { data: { user } } = await supabase.auth.getUser()
      if (!user) return

      const [graces, prieres, ecritures, paroles, rencontres] = await Promise.all([
        supabase.from('graces').select('*').eq('user_id', user.id),
        supabase.from('prieres').select('*').eq('user_id', user.id),
        supabase.from('paroles_ecriture').select('*').eq('user_id', user.id),
        supabase.from('paroles_connaissance').select('*').eq('user_id', user.id),
        supabase.from('rencontres_missionnaires').select('*').eq('user_id', user.id)
      ])

      const allEntries = [
        ...(graces.data || []).map(g => ({ ...g, type: 'grace', date: g.date })),
        ...(prieres.data || []).map(p => ({ ...p, type: 'priere', date: p.date })),
        ...(ecritures.data || []).map(e => ({ ...e, type: 'ecriture', date: e.date_reception })),
        ...(paroles.data || []).map(p => ({ ...p, type: 'parole', date: p.date })),
        ...(rencontres.data || []).map(r => ({ ...r, type: 'rencontre', date: r.date }))
      ].sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())

      
      
      // Charger aussi les liens spirituels
      const { data: liens } = await supabase
        .from('liens_spirituels')
        .select('*')
        .eq('user_id', user.id)
      
      // Ajouter le nombre de liens à chaque entrée
      allEntries.forEach(entry => {
        entry.linksCount = (liens || []).filter(l => 
          (l.element_source_id === entry.id && l.element_source_type === entry.type) ||
          (l.element_cible_id === entry.id && l.element_cible_type === entry.type)
        ).length
      })
      
      setEntries(allEntries)

      // Charger les liens spirituels
      const { data: liensData } = await supabase
        .from('liens_spirituels')
        .select('*')
        .eq('user_id', user.id)
      
      setSpiritualLinks(liensData || [])    } catch (error) {
      console.error('Erreur lors du chargement:', error)
      setError('Erreur lors du chargement des données')
    } finally {
      setLoading(false)
    }
  }

  function filterEntries() {
    let filtered = [...entries]

    // Filtre par période
    const periodMap: Record<string, number | null> = {
      '1week': 7,
      '1month': 30,
      '3months': 90,
      '6months': 180,
      '1year': 365,
      'all': null
    }

    if (periodMap[selectedPeriod]) {
      const startDate = new Date()
      startDate.setDate(startDate.getDate() - periodMap[selectedPeriod])
      filtered = filtered.filter(e => new Date(e.date) >= startDate)
    }

    // Filtre par type
    if (!selectedTypes.includes('all')) {
      filtered = filtered.filter(e => selectedTypes.includes(e.type))
    }

    setFilteredEntries(filtered)
  }

  const getTypeConfig = (type: string) => {
    const configs: Record<string, any> = {
      grace: { icon: Sparkles, color: '#fbbf24', gradient: 'linear-gradient(135deg, #fbbf24, #f59e0b)', label: 'Grâce' },
      priere: { icon: Heart, color: '#6366f1', gradient: 'linear-gradient(135deg, #6366f1, #4f46e5)', label: 'Prière' },
      ecriture: { icon: BookOpen, color: '#10b981', gradient: 'linear-gradient(135deg, #10b981, #059669)', label: 'Écriture' },
      parole: { icon: MessageSquare, color: '#0ea5e9', gradient: 'linear-gradient(135deg, #0ea5e9, #0284c7)', label: 'Parole' },
      rencontre: { icon: Users, color: '#f43f5e', gradient: 'linear-gradient(135deg, #f43f5e, #e11d48)', label: 'Rencontre' }
    }
    return configs[type] || { icon: Sparkles, color: '#6b7280', gradient: 'linear-gradient(135deg, #6b7280, #4b5563)', label: 'Autre' }
  }

  const getSuggestions = () => {
    const suggestions = []
    const now = new Date()
    
    // Analyser les patterns
    const graceCount = filteredEntries.filter(e => e.type === 'grace').length
    const accomplishedParoles = filteredEntries.filter(e => e.type === 'parole' && e.date_accomplissement).length
    
    if (graceCount > 5) {
      suggestions.push({
        icon: Cross,
        text: `${graceCount} grâces reçues sur cette période. Deo gratias !`,
        color: '#fbbf24'
      })
    }
    
    if (accomplishedParoles > 0) {
      suggestions.push({
        icon: Zap,
        text: `${accomplishedParoles} parole${accomplishedParoles > 1 ? 's' : ''} accomplie${accomplishedParoles > 1 ? 's' : ''}. L'Esprit Saint est à l'œuvre.`,
        color: '#0ea5e9'
      })
    }
    
    // Suggestions de suivi - Rappels doux
    const oldPrayers = entries.filter(e => 
      e.type === 'priere' && 
      differenceInDays(now, new Date(e.date)) > 90
    )
    
    if (oldPrayers.length > 0 && Math.random() < 0.3) { // 30% de chance d'afficher
      const prayer = oldPrayers[Math.floor(Math.random() * oldPrayers.length)]
      suggestions.push({
        icon: Heart,
        text: `${prayer.personne_prenom}, pour qui tu as prié, traverse peut-être ton esprit aujourd'hui...`,
        color: '#6366f1',
        action: 'Prendre des nouvelles'
      })
    }
    
    // Détecter les liens possibles
    const recentPrayers = filteredEntries.filter(e => e.type === 'priere' && new Date(e.date) > subMonths(now, 1))
    const recentGraces = filteredEntries.filter(e => e.type === 'grace' && new Date(e.date) > subMonths(now, 1))
    
    if (recentPrayers.length > 0 && recentGraces.length > 0) {
      suggestions.push({
        icon: LinkIcon,
        text: "Certaines prières récentes semblent avoir porté du fruit...",
        color: '#a855f7',
        action: 'Discerner les liens'
      })
    }
    
    // Pattern spirituel détecté
    const rencontresWithSimilarContext = entries.filter(e => e.type === 'rencontre').reduce((acc, r) => {
      acc[r.contexte] = (acc[r.contexte] || 0) + 1
      return acc
    }, {})
    
    const mostFrequentContext = Object.entries(rencontresWithSimilarContext)
      .sort(([,a], [,b]) => b - a)[0]
    
    if (mostFrequentContext && mostFrequentContext[1] > 3) {
      suggestions.push({
        icon: Compass,
        text: `L'Esprit semble t'envoyer souvent ${mostFrequentContext[0] === 'rue' ? 'dans la rue' : mostFrequentContext[0]}...`,
        color: '#f43f5e'
      })
    }
    
    return suggestions
  }

  const findPossibleLinks = (entry: any) => {
    const links = []
    const entryDate = new Date(entry.date)
    
    // Chercher des liens potentiels
    entries.forEach(e => {
      if (e.id === entry.id) return
      
      const eDate = new Date(e.date)
      const daysDiff = Math.abs(differenceInDays(entryDate, eDate))
      
      // Prière exaucée par une grâce
      if (entry.type === 'priere' && e.type === 'grace' && daysDiff < 90 && eDate > entryDate) {
        // Vérifier si les sujets correspondent
        const prayerKeywords = entry.sujet?.toLowerCase().split(' ') || []
        const graceText = (e.texte || '').toLowerCase()
        const hasMatch = prayerKeywords.some(word => word.length > 3 && graceText.includes(word))
        
        if (hasMatch || daysDiff < 30) {
          links.push({
            entry: e,
            type: 'exauce',
            label: 'Cette prière semble avoir été exaucée dans...',
            strength: hasMatch ? 'fort' : 'possible',
            explanation: `Prière du ${format(entryDate, 'dd MMM', { locale: fr })} → Grâce du ${format(eDate, 'dd MMM', { locale: fr })} (${daysDiff} jours après)`
          })
        }
      }
      
      // Parole accomplie dans un événement
      if (entry.type === 'parole' && !entry.date_accomplissement && daysDiff < 180 && eDate > entryDate) {
        links.push({
          entry: e,
          type: 'accomplit',
          label: 'Cette parole pourrait s\'être accomplie dans...',
          strength: 'possible',
          explanation: `Parole reçue il y a ${daysDiff} jours`
        })
      }
      
      // Écriture qui éclaire une situation
      if (entry.type === 'ecriture' && daysDiff < 7) {
        links.push({
          entry: e,
          type: 'eclaire',
          label: 'Cette Parole de Dieu éclaire peut-être...',
          strength: 'possible',
          explanation: `Lecture et événement séparés de ${daysDiff} jour${daysDiff > 1 ? 's' : ''}`
        })
      }
      
      // Grâce qui découle d'une prière
      if (entry.type === 'grace' && e.type === 'priere' && daysDiff < 90 && eDate < entryDate) {
        links.push({
          entry: e,
          type: 'decoule',
          label: 'Cette grâce pourrait être le fruit de...',
          strength: daysDiff < 30 ? 'fort' : 'possible',
          explanation: `${daysDiff} jours après la prière`
        })
      }
    })
    
    return links.sort((a, b) => {
      // Trier par force puis par date
      if (a.strength === 'fort' && b.strength !== 'fort') return -1
      if (a.strength !== 'fort' && b.strength === 'fort') return 1
      return 0
    })
  }

  const handleLinkClick = (entry: any) => {
    if (linkMode) {
      if (!firstSelectedEntry) {
        setFirstSelectedEntry(entry)
      } else {
        // Créer le lien entre les deux entrées
        setSelectedEntryForLink(firstSelectedEntry)
        setPossibleLinks([{
          entry: entry,
          type: 'echo',
          label: 'Lien créé manuellement',
          strength: 'fort',
          explanation: 'Vous avez identifié un lien spirituel'
        }])
        setShowLinkModal(true)
        setLinkMode(false)
        setFirstSelectedEntry(null)
      }
    } else {
      setSelectedEntryForLink(entry)
      setShowLinkModal(true)
    }
  }

  const saveSpiritualLink = async (fromEntry: Entry, toEntry: Entry, linkType: string, label: string, notes?: string) => {
    try {
      const { data: { user } } = await supabase.auth.getUser()
      if (!user) return

      const { error } = await supabase
        .from('liens_spirituels')
        .insert({
          user_id: user.id,
          element_source_type: fromEntry.type,
          element_source_id: fromEntry.id,
          element_cible_type: toEntry.type,
          element_cible_id: toEntry.id,
          type_lien: linkType,
          description: `${label}${notes ? ' - ' + notes : ''}`
        })

      if (error) {
        console.error('Erreur lors de la sauvegarde du lien:', error)
        alert('Erreur lors de la sauvegarde du lien')
      } else {
        alert('Lien spirituel créé avec succès !')
        setShowLinkModal(false)
        loadAllEntries()
      }
    } catch (error) {
      console.error('Erreur:', error)
    }
  }

  const getEntryText = (entry: any) => {
    return entry.texte || entry.description || entry.sujet || entry.reference || 
           (entry.type === 'priere' ? `Prière pour ${entry.personne_prenom}` : 'Entrée')
  }

  const areEntriesLinked = (entry1: any, entry2: any) => {
    return spiritualLinks.some(link => 
      (link.element_source_id === entry1.id && link.element_source_type === entry1.type &&
       link.element_cible_id === entry2.id && link.element_cible_type === entry2.type) ||
      (link.element_source_id === entry2.id && link.element_source_type === entry2.type &&
       link.element_cible_id === entry1.id && link.element_cible_type === entry1.type)
    )
  }




  if (loading) {
    return (
      <div style={{
        minHeight: '100vh',
        background: 'linear-gradient(to bottom right, #fef3c7 0%, #fce7f3 33%, #e0e7ff 66%, #ddd6fe 100%)',
        padding: '2rem 1rem',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center'
      }}>
        <div style={{
          background: 'white',
          borderRadius: '1rem',
          padding: '3rem',
          boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',
          textAlign: 'center'
        }}>
          <Sparkles size={48} style={{ color: '#a855f7', margin: '0 auto 1rem', animation: 'pulse 2s ease-in-out infinite' }} />
          <p style={{ color: '#6b7280' }}>Préparation de votre relecture spirituelle...</p>
        </div>
      </div>
    )
  }

  const suggestions = getSuggestions()

  return (
    <div style={{
      minHeight: '100vh',
      background: 'linear-gradient(to bottom right, #fef3c7 0%, #fce7f3 33%, #e0e7ff 66%, #ddd6fe 100%)',
      paddingBottom: '4rem'
    }}>
      {/* En-tête magnifique */}
      <div style={{
        background: 'linear-gradient(135deg, #7c3aed 0%, #a855f7 50%, #c084fc 100%)',
        padding: '3rem 1rem',
        color: 'white',
        textAlign: 'center',
        position: 'relative',
        overflow: 'hidden'
      }}>
        {/* Effet de particules flottantes */}
        <div style={{
          position: 'absolute',
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          background: 'url("data:image/svg+xml,%3Csvg width=\"60\" height=\"60\" xmlns=\"http://www.w3.org/2000/svg\"%3E%3Cg fill=\"none\" fill-rule=\"evenodd\"%3E%3Cg fill=\"%23ffffff\" fill-opacity=\"0.1\"%3E%3Cpath d=\"M36 34v-4h-2v4h-4v2h4v4h2v-4h4v-2h-4zm0-30V0h-2v4h-4v2h4v4h2V6h4V4h-4zM6 34v-4H4v4H0v2h4v4h2v-4h4v-2H6zM6 4V0H4v4H0v2h4v4h2V6h4V4H6z\"/%3E%3C/g%3E%3C/g%3E%3C/svg%3E")',
          opacity: 0.5
        }} />
        
        <div style={{ position: 'relative', zIndex: 1, maxWidth: '800px', margin: '0 auto' }}>
          <Link 
            href="/dashboard" 
            style={{
              position: 'absolute',
              top: '-2rem',
              left: '0',
              display: 'inline-flex',
              alignItems: 'center',
              gap: '0.5rem',
              color: 'white',
              textDecoration: 'none',
              fontSize: '0.875rem',
              opacity: 0.9
            }}
          >
            <ArrowLeft size={16} />
            Retour
          </Link>
          
          <h1 style={{ 
            fontSize: '3rem', 
            fontWeight: 'bold',
            marginBottom: '1rem',
            textShadow: '0 2px 4px rgba(0,0,0,0.1)'
          }}>
            🌿 Relecture spirituelle
          </h1>
          <p style={{ 
            fontSize: '1.25rem',
            opacity: 0.95,
            marginBottom: '2rem',
            fontStyle: 'italic'
          }}>
            "Chercher et trouver Dieu en toutes choses"
          </p>
          
          {/* Stats rapides */}
          <div style={{
            display: 'flex',
            justifyContent: 'center',
            gap: '2rem',
            flexWrap: 'wrap',
            marginTop: '2rem'
          }}>
            <div style={{
              background: 'rgba(255, 255, 255, 0.2)',
              padding: '1rem 2rem',
              borderRadius: '9999px',
              backdropFilter: 'blur(10px)'
            }}>
              <span style={{ fontSize: '1.5rem', fontWeight: 'bold' }}>{entries.length}</span>
              <span style={{ marginLeft: '0.5rem' }}>moments notés</span>
            </div>
            <div style={{
              background: 'rgba(255, 255, 255, 0.2)',
              padding: '1rem 2rem',
              borderRadius: '9999px',
              backdropFilter: 'blur(10px)'
            }}>
              <span style={{ fontSize: '1.5rem', fontWeight: 'bold' }}>{filteredEntries.length}</span>
              <span style={{ marginLeft: '0.5rem' }}>dans cette période</span>
            </div>
          </div>
        </div>
      </div>

      <div style={{ maxWidth: '1200px', margin: '0 auto', padding: '2rem 1rem' }}>
        {/* Barre d'outils */}
        <div style={{
          background: 'white',
          borderRadius: '1rem',
          padding: '1rem',
          marginBottom: '1rem',
          boxShadow: '0 2px 4px rgba(0, 0, 0, 0.1)',
          display: 'flex',
          justifyContent: 'space-between',
          alignItems: 'center'
        }}>
          <div style={{ display: 'flex', gap: '0.5rem' }}>
            <button
              onClick={() => {
                setLinkMode(!linkMode)
                setFirstSelectedEntry(null)
              }}
              style={{
                padding: '0.5rem 1rem',
                borderRadius: '0.5rem',
                border: 'none',
                background: linkMode ? '#7c3aed' : '#f3f4f6',
                color: linkMode ? 'white' : '#4b5563',
                cursor: 'pointer',
                display: 'flex',
                alignItems: 'center',
                gap: '0.5rem',
                transition: 'all 0.2s'
              }}
            >
              <LinkIcon size={16} />
              Mode Lien {linkMode && '(actif)'}
            </button>
          </div>
          {linkMode && (
            <p style={{ fontSize: '0.875rem', color: '#7c3aed', fontStyle: 'italic' }}>
              {firstSelectedEntry 
                ? `Sélectionnez le second élément à relier avec "${getEntryText(firstSelectedEntry).substring(0, 30)}..."`
                : 'Cliquez sur un premier élément à relier'}
            </p>
          )}
        </div>

        {/* Modes de vue */}
        <div style={{
          background: 'white',
          borderRadius: '1rem',
          padding: '1rem',
          marginBottom: '2rem',
          boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',
          display: 'flex',
          justifyContent: 'center',
          gap: '0.5rem',
          flexWrap: 'wrap'
        }}>
          <button
            onClick={() => setViewMode('chronologique')}
            style={{
              padding: '0.5rem 1rem',
              borderRadius: '0.5rem',
              border: 'none',
              background: viewMode === 'chronologique' ? '#7c3aed' : 'transparent',
              color: viewMode === 'chronologique' ? 'white' : '#6b7280',
              cursor: 'pointer',
              display: 'flex',
              alignItems: 'center',
              gap: '0.5rem',
              transition: 'all 0.2s'
            }}
          >
            <Calendar size={16} />
            Vue chronologique
          </button>
          <button
            onClick={() => setViewMode('thematique')}
            style={{
              padding: '0.5rem 1rem',
              borderRadius: '0.5rem',
              border: 'none',
              background: viewMode === 'thematique' ? '#7c3aed' : 'transparent',
              color: viewMode === 'thematique' ? 'white' : '#6b7280',
              cursor: 'pointer',
              display: 'flex',
              alignItems: 'center',
              gap: '0.5rem',
              transition: 'all 0.2s'
            }}
          >
            <BookOpen size={16} />
            Vue thématique
          </button>
          <button
            onClick={() => setViewMode('consolations')}
            style={{
              padding: '0.5rem 1rem',
              borderRadius: '0.5rem',
              border: 'none',
              background: viewMode === 'consolations' ? '#7c3aed' : 'transparent',
              color: viewMode === 'consolations' ? 'white' : '#6b7280',
              cursor: 'pointer',
              display: 'flex',
              alignItems: 'center',
              gap: '0.5rem',
              transition: 'all 0.2s'
            }}
          >
            <Heart size={16} />
            Consolations & désolations
          </button>
          <button
            onClick={() => setViewMode('jardin')}
            style={{
              padding: '0.5rem 1rem',
              borderRadius: '0.5rem',
              border: 'none',
              background: viewMode === 'jardin' ? '#7c3aed' : 'transparent',
              color: viewMode === 'jardin' ? 'white' : '#6b7280',
              cursor: 'pointer',
              display: 'flex',
              alignItems: 'center',
              gap: '0.5rem',
              transition: 'all 0.2s'
            }}
          >
            <Flower size={16} />
            Jardin des grâces
          </button>
          <button
            onClick={() => setViewMode('fleuve')}
            style={{
              padding: '0.5rem 1rem',
              borderRadius: '0.5rem',
              border: 'none',
              background: viewMode === 'fleuve' ? '#7c3aed' : 'transparent',
              color: viewMode === 'fleuve' ? 'white' : '#6b7280',
              cursor: 'pointer',
              display: 'flex',
              alignItems: 'center',
              gap: '0.5rem',
              transition: 'all 0.2s'
            }}
          >
            <Sparkles size={16} />
            Fleuve de vie
          </button>
          <button
            onClick={() => setViewMode('constellation')}
            style={{
              padding: '0.5rem 1rem',
              borderRadius: '0.5rem',
              border: 'none',
              background: viewMode === 'constellation' ? '#7c3aed' : 'transparent',
              color: viewMode === 'constellation' ? 'white' : '#6b7280',
              cursor: 'pointer',
              display: 'flex',
              alignItems: 'center',
              gap: '0.5rem',
              transition: 'all 0.2s'
            }}
          >
            <Star size={16} />
            Constellation
          </button>
        </div>

        {/* Filtres élégants */}
        <div style={{
          background: 'white',
          borderRadius: '1rem',
          padding: '1.5rem',
          marginBottom: '2rem',
          boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)'
        }}>
          <div style={{ display: 'flex', alignItems: 'center', gap: '1rem', marginBottom: '1rem' }}>
            <Filter size={20} style={{ color: '#6b7280' }} />
            <h3 style={{ fontSize: '1.125rem', fontWeight: '600', color: '#1f2937' }}>Filtrer ma relecture</h3>
          </div>
          
          <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', gap: '1rem' }}>
            <div>
              <label style={{ display: 'block', marginBottom: '0.5rem', color: '#6b7280', fontSize: '0.875rem' }}>Période</label>
              <select 
                className="select"
                value={selectedPeriod}
                onChange={(e) => setSelectedPeriod(e.target.value)}
              >
                <option value="1week">Cette semaine</option>
                <option value="1month">Ce mois</option>
                <option value="3months">3 derniers mois</option>
                <option value="6months">6 derniers mois</option>
                <option value="1year">Cette année</option>
                <option value="all">Tout voir</option>
              </select>
            </div>
            
            <div>
              <label style={{ display: 'block', marginBottom: '0.5rem', color: '#6b7280', fontSize: '0.875rem' }}>Types d'entrées</label>
              <div style={{ display: 'flex', flexWrap: 'wrap', gap: '0.5rem' }}>
                <button
                  onClick={() => setSelectedTypes(['all'])}
                  style={{
                    padding: '0.5rem 1rem',
                    borderRadius: '9999px',
                    border: 'none',
                    background: selectedTypes.includes('all') ? '#7c3aed' : '#e5e7eb',
                    color: selectedTypes.includes('all') ? 'white' : '#6b7280',
                    cursor: 'pointer',
                    fontSize: '0.875rem',
                    transition: 'all 0.2s'
                  }}
                >
                  Tout
                </button>
                {['grace', 'priere', 'ecriture', 'parole', 'rencontre'].map(type => {
                  const config = getTypeConfig(type)
                  return (
                    <button
                      key={type}
                      onClick={() => {
                        if (selectedTypes.includes('all')) {
                          setSelectedTypes([type])
                        } else if (selectedTypes.includes(type)) {
                          setSelectedTypes(selectedTypes.filter(t => t !== type))
                        } else {
                          setSelectedTypes([...selectedTypes, type])
                        }
                      }}
                      style={{
                        padding: '0.5rem 1rem',
                        borderRadius: '9999px',
                        border: 'none',
                        background: selectedTypes.includes(type) || selectedTypes.includes('all') ? config.color : '#e5e7eb',
                        color: selectedTypes.includes(type) || selectedTypes.includes('all') ? 'white' : '#6b7280',
                        cursor: 'pointer',
                        fontSize: '0.875rem',
                        transition: 'all 0.2s'
                      }}
                    >
                      {config.label}
                    </button>
                  )
                })}
              </div>
            </div>
          </div>
        </div>

        {/* Section "L'Esprit Saint est à l'œuvre" - Plus visible */}
        {showSuggestions && suggestions.length > 0 && (
          <div style={{
            background: 'white',
            borderRadius: '1rem',
            marginBottom: '2rem',
            overflow: 'hidden',
            boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',
            position: 'relative'
          }}>
            {/* En-tête coloré */}
            <div style={{
              background: 'linear-gradient(135deg, #7c3aed, #a855f7)',
              padding: '1rem 1.5rem',
              color: 'white',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'space-between'
            }}>
              <h3 style={{ 
                fontSize: '1.125rem', 
                fontWeight: '600', 
                display: 'flex',
                alignItems: 'center',
                gap: '0.5rem',
                margin: 0
              }}>
                <Church size={20} />
                L'Esprit Saint est à l'œuvre
              </h3>
              <button
                onClick={() => setShowSuggestions(false)}
                style={{
                  background: 'none',
                  border: 'none',
                  color: 'white',
                  cursor: 'pointer',
                  fontSize: '1.25rem',
                  opacity: 0.8
                }}
              >
                ×
              </button>
            </div>
            
            {/* Contenu des suggestions */}
            <div style={{ padding: '1.5rem' }}>
              <p style={{ 
                color: '#6b7280', 
                fontSize: '0.875rem', 
                marginBottom: '1rem',
                fontStyle: 'italic'
              }}>
                L'Esprit souffle et révèle des connexions dans votre vie spirituelle...
              </p>
              <div style={{ display: 'flex', flexDirection: 'column', gap: '0.75rem' }}>
                {suggestions.map((suggestion, index) => {
                  const Icon = suggestion.icon
                  return (
                    <div 
                      key={index}
                      style={{
                        display: 'flex',
                        alignItems: 'center',
                        gap: '0.75rem',
                        padding: '1rem',
                        background: '#f9fafb',
                        borderRadius: '0.75rem',
                        border: '1px solid #e5e7eb',
                        cursor: suggestion.action ? 'pointer' : 'default',
                        transition: 'all 0.2s',
                        ':hover': {
                          borderColor: suggestion.color,
                          transform: 'translateY(-1px)'
                        }
                      }}
                      onMouseEnter={(e) => {
                        e.currentTarget.style.borderColor = suggestion.color
                        e.currentTarget.style.transform = 'translateY(-1px)'
                      }}
                      onMouseLeave={(e) => {
                        e.currentTarget.style.borderColor = '#e5e7eb'
                        e.currentTarget.style.transform = 'translateY(0)'
                      }}
                    >
                      <div style={{
                        background: suggestion.color + '20',
                        padding: '0.5rem',
                        borderRadius: '0.5rem',
                        flexShrink: 0
                      }}>
                        <Icon size={20} style={{ color: suggestion.color }} />
                      </div>
                      <p style={{ color: '#1f2937', fontSize: '0.875rem', margin: 0, flex: 1 }}>
                        {suggestion.text}
                      </p>
                      {suggestion.action && (
                        <ChevronRight size={16} style={{ color: '#6b7280', flexShrink: 0 }} />
                      )}
                    </div>
                  )
                })}
              </div>
            </div>
          </div>
        )}

        {/* Timeline spirituelle - Vue chronologique */}
        {viewMode === 'chronologique' && (
          <div style={{ position: 'relative' }}>
            {/* Ligne centrale */}
            {filteredEntries.length > 0 && (
              <div style={{
                position: 'absolute',
                left: '50%',
                top: 0,
                bottom: 0,
                width: '2px',
                background: 'linear-gradient(to bottom, #e5e7eb, #7c3aed, #e5e7eb)',
                transform: 'translateX(-50%)'
              }} />
            )}

            {/* Entrées */}
            {filteredEntries.map((entry, index) => {
              const config = getTypeConfig(entry.type)
              const Icon = config.icon
              const isExpanded = expandedEntry === entry.id
              const isLeft = index % 2 === 0
              const isSelected = firstSelectedEntry?.id === entry.id

              return (
                <div
                  key={entry.id}
                  style={{
                    display: 'flex',
                    justifyContent: isLeft ? 'flex-end' : 'flex-start',
                    marginBottom: '2rem',
                    position: 'relative'
                  }}
                >
                  {/* Connecteur */}
                  <div style={{
                    position: 'absolute',
                    left: '50%',
                    top: '2rem',
                    width: '20px',
                    height: '20px',
                    background: config.gradient,
                    borderRadius: '50%',
                    transform: 'translate(-50%, -50%)',
                    boxShadow: '0 0 0 4px white, 0 0 0 6px ' + config.color + '30',
                    zIndex: 1
                  }} />

                  {/* Carte */}
                  <div 
                    style={{
                      width: '45%',
                      background: 'white',
                      borderRadius: '1rem',
                      padding: '1.5rem',
                      boxShadow: isSelected ? `0 0 0 3px ${config.color}` : '0 4px 6px rgba(0, 0, 0, 0.1)',
                      cursor: 'pointer',
                      transition: 'all 0.3s',
                      transform: isExpanded ? 'scale(1.02)' : 'scale(1)',
                      marginRight: isLeft ? '2.5rem' : '0',
                      marginLeft: isLeft ? '0' : '2.5rem'
                    }}
                    onClick={() => {
                      if (linkMode) {
                        handleLinkClick(entry)
                      } else {
                        setExpandedEntry(isExpanded ? null : entry.id)
                      }
                    }}
                  >
                    <div style={{ display: 'flex', alignItems: 'start', gap: '1rem' }}>
                      <div style={{
                        background: config.gradient,
                        padding: '0.75rem',
                        borderRadius: '0.75rem',
                        color: 'white',
                        flexShrink: 0
                      }}>
                        <Icon size={20} />
                      </div>
                      
                      <div style={{ flex: 1 }}>
                        <div style={{ 
                          display: 'flex', 
                          justifyContent: 'space-between', 
                          alignItems: 'start',
                          marginBottom: '0.5rem'
                        }}>
                          <h4 style={{ 
                            color: '#1f2937', 
                            fontWeight: '600',
                            fontSize: '1rem'
                          }}>
                            {config.label}
                          </h4>
                          <time style={{ 
                            fontSize: '0.75rem', 
                            color: '#6b7280' 
                          }}>
                            {format(parseISO(entry.date), 'dd MMM', { locale: fr })}
                          </time>
                        </div>
                        
                        <p style={{ 
                          color: '#4b5563',
                          fontSize: '0.875rem',
                          lineHeight: '1.5',
                          marginBottom: isExpanded ? '1rem' : '0',
                          display: '-webkit-box',
                          WebkitLineClamp: isExpanded ? 'none' : 2,
                          WebkitBoxOrient: 'vertical',
                          overflow: 'hidden'
                        }}>
                          {getEntryText(entry)}
                        </p>
                        
                        {isExpanded && (
                          <div style={{
                            borderTop: '1px solid #e5e7eb',
                            paddingTop: '1rem',
                            marginTop: '1rem'
                          }}>
                            {entry.lieu && (
                              <p style={{ fontSize: '0.875rem', color: '#6b7280', marginBottom: '0.5rem' }}>
                                📍 {entry.lieu}
                              </p>
                            )}
                            {entry.tags && entry.tags.length > 0 && (
                              <div style={{ display: 'flex', flexWrap: 'wrap', gap: '0.25rem', marginBottom: '0.5rem' }}>
                                {entry.tags.map((tag: string, i: number) => (
                                  <span 
                                    key={i}
                                    style={{
                                      background: config.color + '20',
                                      color: config.color,
                                      padding: '0.125rem 0.5rem',
                                      borderRadius: '9999px',
                                      fontSize: '0.75rem'
                                    }}
                                  >
                                    {tag}
                                  </span>
                                ))}
                              </div>
                            )}
                            <div style={{ display: 'flex', gap: '0.5rem', marginTop: '0.5rem' }}>
                              <Link
                                href={`/${entry.type}s/${entry.id}`}
                                style={{
                                  display: 'inline-flex',
                                  alignItems: 'center',
                                  gap: '0.25rem',
                                  color: config.color,
                                  fontSize: '0.875rem',
                                  textDecoration: 'none'
                                }}
                              >
                                <Eye size={14} />
                                Voir le détail
                              </Link>
                              <button
                                onClick={(e) => {
                                  e.stopPropagation()
                                  setSelectedEntryForLink(entry)
                                  setShowLinkModal(true)
                                }}
                                style={{
                                  display: 'inline-flex',
                                  alignItems: 'center',
                                  gap: '0.25rem',
                                  color: '#a855f7',
                                  fontSize: '0.875rem',
                                  background: 'none',
                                  border: 'none',
                                  cursor: 'pointer',
                                  padding: '0.25rem 0.5rem',
                                  borderRadius: '0.25rem',
                                  transition: 'background 0.2s'
                                }}
                              >
                                <LinkIcon size={14} />
                                Relier
                              </button>
                            </div>
                          </div>
                        )}
                      </div>
                    </div>
                  </div>
                </div>
              )
            })}
          </div>
        )}

        {/* Vue thématique */}
        {viewMode === 'thematique' && (
          <div style={{
            display: 'grid',
            gridTemplateColumns: 'repeat(auto-fill, minmax(350px, 1fr))',
            gap: '2rem'
          }}>
            {['grace', 'priere', 'ecriture', 'parole', 'rencontre'].map(type => {
              const config = getTypeConfig(type)
              const Icon = config.icon
              const typeEntries = filteredEntries.filter(e => e.type === type)
              
              if (typeEntries.length === 0) return null
              
              return (
                <div
                  key={type}
                  style={{
                    background: 'white',
                    borderRadius: '1rem',
                    overflow: 'hidden',
                    boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)'
                  }}
                >
                  <div style={{
                    background: config.gradient,
                    padding: '1.5rem',
                    color: 'white'
                  }}>
                    <h3 style={{
                      fontSize: '1.25rem',
                      fontWeight: 'bold',
                      display: 'flex',
                      alignItems: 'center',
                      gap: '0.5rem'
                    }}>
                      <Icon size={24} />
                      {config.label}s ({typeEntries.length})
                    </h3>
                  </div>
                  <div style={{ padding: '1rem', maxHeight: '400px', overflow: 'auto' }}>
                    {typeEntries.slice(0, 5).map(entry => {
                      const isSelected = firstSelectedEntry?.id === entry.id
                      return (
                        <div
                          key={entry.id}
                          style={{
                            padding: '0.75rem',
                            borderBottom: '1px solid #e5e7eb',
                            cursor: 'pointer',
                            transition: 'all 0.2s',
                            background: isSelected ? config.color + '10' : 'transparent',
                            borderLeft: isSelected ? `4px solid ${config.color}` : '4px solid transparent'
                          }}
                          onClick={() => handleLinkClick(entry)}
                        >
                          <p style={{
                            fontSize: '0.875rem',
                            color: '#4b5563',
                            marginBottom: '0.25rem',
                            overflow: 'hidden',
                            textOverflow: 'ellipsis',
                            whiteSpace: 'nowrap'
                          }}>
                            {getEntryText(entry)}
                          </p>
                          <time style={{ fontSize: '0.75rem', color: '#9ca3af' }}>
                            {format(parseISO(entry.date), 'dd MMM yyyy', { locale: fr })}
                          </time>
                        </div>
                      )
                    })}
                    {typeEntries.length > 5 && (
                      <p style={{
                        textAlign: 'center',
                        padding: '0.75rem',
                        color: '#6b7280',
                        fontSize: '0.875rem'
                      }}>
                        Et {typeEntries.length - 5} autres...
                      </p>
                    )}
                  </div>
                </div>
              )
            })}
          </div>
        )}

        {/* Vue Consolations & Désolations */}
        {viewMode === 'consolations' && (
          <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '2rem' }}>
            {/* Consolations */}
            <div style={{
              background: 'white',
              borderRadius: '1rem',
              padding: '2rem',
              boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)'
            }}>
              <h3 style={{
                fontSize: '1.5rem',
                fontWeight: 'bold',
                color: '#10b981',
                marginBottom: '1rem',
                display: 'flex',
                alignItems: 'center',
                gap: '0.5rem'
              }}>
                <Heart size={24} />
                Consolations
              </h3>
              <p style={{ color: '#6b7280', marginBottom: '1rem' }}>
                Moments où j'ai senti la présence de Dieu
              </p>
              <div style={{ display: 'flex', flexDirection: 'column', gap: '1rem' }}>
                {filteredEntries
                  .filter(e => e.type === 'grace' || (e.type === 'parole' && e.date_accomplissement))
                  .slice(0, 5)
                  .map(entry => {
                    const config = getTypeConfig(entry.type)
                    const Icon = config.icon
                    const isSelected = firstSelectedEntry?.id === entry.id
                    return (
                      <div
                        key={entry.id}
                        style={{
                          border: '2px solid',
                          borderColor: isSelected ? config.color : '#d1fae5',
                          borderRadius: '0.5rem',
                          padding: '1rem',
                          cursor: 'pointer',
                          transition: 'all 0.2s',
                          background: isSelected ? config.color + '10' : 'white'
                        }}
                        onClick={() => handleLinkClick(entry)}
                      >
                        <div style={{ display: 'flex', alignItems: 'start', gap: '0.5rem' }}>
                          <Icon size={16} style={{ color: config.color, marginTop: '2px' }} />
                          <div style={{ flex: 1 }}>
                            <p style={{ fontSize: '0.875rem', color: '#4b5563' }}>
                              {getEntryText(entry)}
                            </p>
                            <time style={{ fontSize: '0.75rem', color: '#9ca3af' }}>
                              {format(parseISO(entry.date), 'dd MMM', { locale: fr })}
                            </time>
                          </div>
                        </div>
                      </div>
                    )
                  })}
              </div>
            </div>

            {/* Désolations / Attentes */}
            <div style={{
              background: 'white',
              borderRadius: '1rem',
              padding: '2rem',
              boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)'
            }}>
              <h3 style={{
                fontSize: '1.5rem',
                fontWeight: 'bold',
                color: '#6366f1',
                marginBottom: '1rem',
                display: 'flex',
                alignItems: 'center',
                gap: '0.5rem'
              }}>
                <Cross size={24} />
                En attente
              </h3>
              <p style={{ color: '#6b7280', marginBottom: '1rem' }}>
                Prières et paroles en cours
              </p>
              <div style={{ display: 'flex', flexDirection: 'column', gap: '1rem' }}>
                {filteredEntries
                  .filter(e => e.type === 'priere' || (e.type === 'parole' && !e.date_accomplissement))
                  .slice(0, 5)
                  .map(entry => {
                    const config = getTypeConfig(entry.type)
                    const Icon = config.icon
                    const isSelected = firstSelectedEntry?.id === entry.id
                    return (
                      <div
                        key={entry.id}
                        style={{
                          border: '2px solid',
                          borderColor: isSelected ? config.color : '#e0e7ff',
                          borderRadius: '0.5rem',
                          padding: '1rem',
                          cursor: 'pointer',
                          transition: 'all 0.2s',
                          background: isSelected ? config.color + '10' : 'white'
                        }}
                        onClick={() => handleLinkClick(entry)}
                      >
                        <div style={{ display: 'flex', alignItems: 'start', gap: '0.5rem' }}>
                          <Icon size={16} style={{ color: config.color, marginTop: '2px' }} />
                          <div style={{ flex: 1 }}>
                            <p style={{ fontSize: '0.875rem', color: '#4b5563' }}>
                              {getEntryText(entry)}
                            </p>
                            <time style={{ fontSize: '0.75rem', color: '#9ca3af' }}>
                              {format(parseISO(entry.date), 'dd MMM', { locale: fr })}
                            </time>
                          </div>
                        </div>
                      </div>
                    )
                  })}
              </div>
            </div>
          </div>
        )}

        {/* Vue Jardin des grâces - Avec bulles animées */}
        {viewMode === 'jardin' && (
          <div style={{
            display: 'grid',
            gridTemplateColumns: 'repeat(auto-fill, minmax(200px, 1fr))',
            gap: '2rem',
            perspective: '1000px'
          }}>
            {filteredEntries.map((entry, index) => {
              const config = getTypeConfig(entry.type)
              const Icon = config.icon
              const delay = index * 0.1
              const isSelected = firstSelectedEntry?.id === entry.id
              
              return (
                <div
                  key={entry.id}
                  style={{
                    background: 'white',
                    borderRadius: '50%',
                    width: '200px',
                    height: '200px',
                    padding: '2rem',
                    boxShadow: isSelected ? `0 0 0 4px ${config.color}` : '0 8px 16px rgba(0, 0, 0, 0.1)',
                    display: 'flex',
                    flexDirection: 'column',
                    alignItems: 'center',
                    justifyContent: 'center',
                    textAlign: 'center',
                    cursor: 'pointer',
                    transition: 'all 0.3s',
                    transform: 'rotateY(0deg)',
                    transformStyle: 'preserve-3d',
                    animation: `float ${3 + Math.random() * 2}s ease-in-out ${delay}s infinite`,
                    position: 'relative'
                  }}
                  onClick={() => handleLinkClick(entry)}
                  onMouseEnter={(e) => {
                    e.currentTarget.style.transform = 'scale(1.1)'
                  }}
                  onMouseLeave={(e) => {
                    e.currentTarget.style.transform = 'scale(1)'
                  }}
                >
                  <div style={{
                    position: 'absolute',
                    top: '1rem',
                    width: '40px',
                    height: '40px',
                    background: config.gradient,
                    borderRadius: '50%',
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center',
                    color: 'white'
                  }}>
                    <Icon size={20} />
                  </div>
                  <p style={{
                    fontSize: '0.875rem',
                    color: '#4b5563',
                    marginTop: '2rem',
                    overflow: 'hidden',
                    textOverflow: 'ellipsis',
                    display: '-webkit-box',
                    WebkitLineClamp: 3,
                    WebkitBoxOrient: 'vertical'
                  }}>
                    {getEntryText(entry)}
                  </p>
                  <time style={{
                    fontSize: '0.75rem',
                    color: '#9ca3af',
                    marginTop: 'auto'
                  }}>
                    {format(parseISO(entry.date), 'dd MMM', { locale: fr })}
                  </time>
                </div>
              )
            })}
          </div>
        )}

        {/* Vue Fleuve de vie - Améliorée */}
        {viewMode === 'fleuve' && (
          <div>
            <div style={{
              background: 'linear-gradient(135deg, #e0e7ff, #ddd6fe)',
              borderRadius: '1rem',
              padding: '1.5rem',
              marginBottom: '2rem',
              textAlign: 'center'
            }}>
              <h3 style={{ color: '#7c3aed', marginBottom: '0.5rem' }}>Le Fleuve de Vie</h3>
              <p style={{ color: '#6b7280', fontSize: '0.875rem' }}>
                Visualisez le cours de votre vie spirituelle, comme un fleuve qui s'écoule dans le temps.
                Chaque moment est une goutte d'eau qui rejoint le courant de la grâce divine.
              </p>
            </div>

            <div style={{
              background: 'white',
              borderRadius: '1rem',
              padding: '2rem',
              minHeight: '500px',
              position: 'relative',
              overflow: 'auto'
            }}>
              {/* Fleuve ondulant */}
              <svg
                style={{
                  position: 'absolute',
                  top: 0,
                  left: 0,
                  width: '100%',
                  height: '100%',
                  zIndex: 0
                }}
                viewBox="0 0 1200 500"
                preserveAspectRatio="none"
              >
                <defs>
                  <linearGradient id="fleuveGradient" x1="0%" y1="0%" x2="100%" y2="0%">
                    <stop offset="0%" stopColor="#a855f7" stopOpacity="0.1" />
                    <stop offset="50%" stopColor="#6366f1" stopOpacity="0.1" />
                    <stop offset="100%" stopColor="#0ea5e9" stopOpacity="0.1" />
                  </linearGradient>
                </defs>
                <path
                  d={`M 0 250 Q 300 ${200 + Math.sin(Date.now() / 1000) * 30} 600 250 T 1200 250`}
                  fill="none"
                  stroke="url(#fleuveGradient)"
                  strokeWidth="120"
                />
              </svg>
              
              {/* Entrées flottantes avec plus d'infos */}
              {filteredEntries.map((entry, index) => {
                const config = getTypeConfig(entry.type)
                const Icon = config.icon
                const position = (index / (filteredEntries.length - 1 || 1)) * 90 + 5
                const yOffset = Math.sin(index * 0.8) * 80
                const isSelected = firstSelectedEntry?.id === entry.id
                
                return (
                  <div
                    key={entry.id}
                    style={{
                      position: 'absolute',
                      left: `${position}%`,
                      top: `${50 + yOffset}%`,
                      transform: 'translate(-50%, -50%)',
                      background: 'white',
                      borderRadius: '1rem',
                      padding: '1.5rem',
                      boxShadow: isSelected ? `0 0 0 3px ${config.color}` : '0 4px 6px rgba(0, 0, 0, 0.1)',
                      cursor: 'pointer',
                      transition: 'all 0.3s',
                      zIndex: 1,
                      minWidth: '200px',
                      maxWidth: '250px'
                    }}
                    onClick={() => handleLinkClick(entry)}
                    onMouseEnter={(e) => {
                      e.currentTarget.style.transform = 'translate(-50%, -50%) scale(1.05)'
                      e.currentTarget.style.zIndex = '10'
                    }}
                    onMouseLeave={(e) => {
                      e.currentTarget.style.transform = 'translate(-50%, -50%) scale(1)'
                      e.currentTarget.style.zIndex = '1'
                    }}
                  >
                    <div style={{
                      display: 'flex',
                      alignItems: 'center',
                      gap: '0.75rem',
                      marginBottom: '0.75rem'
                    }}>
                      <div style={{
                        background: config.gradient,
                        width: '36px',
                        height: '36px',
                        borderRadius: '50%',
                        display: 'flex',
                        alignItems: 'center',
                        justifyContent: 'center',
                        color: 'white',
                        flexShrink: 0
                      }}>
                        <Icon size={18} />
                      </div>
                      <div>
                        <p style={{
                          fontSize: '0.875rem',
                          fontWeight: '600',
                          color: config.color,
                          margin: 0
                        }}>
                          {config.label}
                        </p>
                        <time style={{
                          fontSize: '0.75rem',
                          color: '#6b7280'
                        }}>
                          {format(parseISO(entry.date), 'dd MMMM', { locale: fr })}
                        </time>
                      </div>
                    </div>
                    <p style={{
                      fontSize: '0.813rem',
                      color: '#4b5563',
                      margin: 0,
                      display: '-webkit-box',
                      WebkitLineClamp: 2,
                      WebkitBoxOrient: 'vertical',
                      overflow: 'hidden',
                      lineHeight: '1.4'
                    }}>
                      {getEntryText(entry)}
                    </p>
                  </div>
                )
              })}
            </div>
          </div>
        )}

        {/* Message d'encouragement si vide */}
        {filteredEntries.length === 0 && (
          <div style={{
            background: 'white',
            borderRadius: '1rem',
            padding: '4rem 2rem',
            textAlign: 'center',
            boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)'
          }}>
            <Sparkles size={48} style={{ 
              margin: '0 auto 1rem', 
              color: '#a855f7',
              opacity: 0.5
            }} />
            <h3 style={{ fontSize: '1.25rem', marginBottom: '0.5rem', color: '#1f2937' }}>
              Aucune entrée pour cette période
            </h3>
            <p style={{ color: '#6b7280' }}>
              Ajustez vos filtres ou commencez à noter les merveilles de Dieu !
            </p>
          </div>
        )}

        {/* Modal de liens spirituels amélioré */}
        {showLinkModal && selectedEntryForLink && (
          <div style={{
            position: 'fixed',
            top: 0,
            left: 0,
            right: 0,
            bottom: 0,
            background: 'rgba(0, 0, 0, 0.5)',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            zIndex: 100,
            padding: '1rem'
          }}>
            <div style={{
              background: 'white',
              borderRadius: '1rem',
              padding: '2rem',
              maxWidth: '800px',
              width: '100%',
              maxHeight: '80vh',
              overflow: 'auto'
            }}>
              <h3 style={{ fontSize: '1.25rem', fontWeight: '600', marginBottom: '1rem' }}>
                Créer des liens spirituels
              </h3>
              
              {/* Élément sélectionné */}
              <div style={{
                background: '#f9fafb',
                borderRadius: '0.5rem',
                padding: '1rem',
                marginBottom: '1.5rem'
              }}>
                <p style={{ fontSize: '0.875rem', color: '#6b7280', marginBottom: '0.5rem' }}>
                  Élément de départ :
                </p>
                <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>
                  {(() => {
                    const config = getTypeConfig(selectedEntryForLink.type)
                    const Icon = config.icon
                    return (
                      <>
                        <Icon size={16} style={{ color: config.color }} />
                        <span style={{ fontSize: '0.875rem', color: '#1f2937', fontWeight: '500' }}>
                          {getEntryText(selectedEntryForLink)}
                        </span>
                      </>
                    )
                  })()}
                </div>
              </div>
              
              {/* Onglets */}
              <div style={{
                display: 'flex',
                gap: '1rem',
                marginBottom: '1.5rem',
                borderBottom: '2px solid #e5e7eb'
              }}>
                <button
                  onClick={() => setPossibleLinks(findPossibleLinks(selectedEntryForLink))}
                  style={{
                    padding: '0.5rem 1rem',
                    background: 'none',
                    border: 'none',
                    borderBottom: '2px solid #7c3aed',
                    color: '#7c3aed',
                    cursor: 'pointer',
                    fontWeight: '600'
                  }}
                >
                  Suggestions automatiques
                </button>
                <button
                  onClick={() => setPossibleLinks(entries.filter(e => e.id !== selectedEntryForLink.id).map(e => ({
                    entry: e,
                    type: 'echo',
                    label: 'Créer un lien manuel',
                    strength: 'manuel',
                    explanation: ''
                  })))}
                  style={{
                    padding: '0.5rem 1rem',
                    background: 'none',
                    border: 'none',
                    borderBottom: '2px solid transparent',
                    color: '#6b7280',
                    cursor: 'pointer'
                  }}
                >
                  Tous les éléments
                </button>
              </div>
              
              <p style={{ color: '#6b7280', marginBottom: '1.5rem', fontSize: '0.875rem' }}>
                L'Esprit Saint tisse des liens entre les événements de votre vie. Sélectionnez un élément à relier :
              </p>
              
              {possibleLinks.length > 0 ? (
                <div style={{ display: 'flex', flexDirection: 'column', gap: '1rem', maxHeight: '400px', overflow: 'auto' }}>
                  {possibleLinks.map((link, index) => {
                    const config = getTypeConfig(link.entry.type)
                    const Icon = config.icon
                    
                    return (
                      <div
                        key={index}
                        style={{
                          border: '2px solid',
                          borderColor: link.strength === 'fort' ? config.color : '#e5e7eb',
                          borderRadius: '0.5rem',
                          padding: '1rem',
                          cursor: 'pointer',
                          transition: 'all 0.2s',
                          background: link.strength === 'fort' ? config.color + '10' : 'white'
                        }}
                        onClick={() => {
                          // Ici on pourrait sauvegarder le lien dans la base de données
                          saveSpiritualLink(selectedEntryForLink, link.entry, link.type, link.label, link.explanation)
                          setShowLinkModal(false)
                        }}
                      >
                        {link.label && (
                          <p style={{
                            fontSize: '0.875rem',
                            color: '#7c3aed',
                            marginBottom: '0.5rem',
                            fontStyle: 'italic'
                          }}>
                            {link.label}
                          </p>
                        )}
                        <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem', marginBottom: '0.5rem' }}>
                          <Icon size={16} style={{ color: config.color }} />
                          <span style={{ fontSize: '0.875rem', color: '#4b5563' }}>
                            {getEntryText(link.entry)}
                          </span>
                        </div>
                        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                          <time style={{ fontSize: '0.75rem', color: '#9ca3af' }}>
                            {format(parseISO(link.entry.date), 'dd MMMM yyyy', { locale: fr })}
                          </time>
                          {link.explanation && (
                            <span style={{ fontSize: '0.75rem', color: '#6b7280' }}>
                              {link.explanation}
                            </span>
                          )}
                        </div>
                      </div>
                    )
                  })}
                </div>
              ) : (
                <p style={{ color: '#6b7280', textAlign: 'center', padding: '2rem' }}>
                  Aucun lien évident pour le moment. Laissez le temps à l'Esprit Saint de révéler les connexions...
                </p>
              )}
              
              <div style={{
                display: 'flex',
                justifyContent: 'flex-end',
                gap: '1rem',
                marginTop: '2rem'
              }}>
                <button
                  onClick={() => {
                    setShowLinkModal(false)
                    setPossibleLinks([])
                  }}
                  style={{
                    padding: '0.5rem 1rem',
                    borderRadius: '0.5rem',
                    border: '2px solid #e5e7eb',
                    background: 'white',
                    color: '#6b7280',
                    cursor: 'pointer'
                  }}
                >
                  Fermer
                </button>
              </div>
            </div>
          </div>
        )}

        {/* Citation finale - Psaume uniquement */}
        <div style={{
          marginTop: '4rem',
          padding: '2rem',
          textAlign: 'center',
          color: '#6b7280',
          fontStyle: 'italic'
        }}>
          <p style={{ marginBottom: '0.5rem', fontSize: '1.125rem' }}>
            "Souviens-toi des merveilles qu'il a faites."
          </p>
          <p style={{ fontSize: '0.875rem' }}>Psaume 105, 5</p>
        </div>
      </div>

      {/* Animation float pour le jardin */}
      
      <style jsx global>{`
        @keyframes glow {
          0% { box-shadow: 0 0 5px rgba(168, 85, 247, 0.5); }
          50% { box-shadow: 0 0 20px rgba(168, 85, 247, 0.8), 0 0 30px rgba(168, 85, 247, 0.6); }
          100% { box-shadow: 0 0 5px rgba(168, 85, 247, 0.5); }
        }
        
        .linked-card {
          animation: glow 2s ease-in-out infinite;
        }
        
        @keyframes pulse {
          0%, 100% { opacity: 1; }
          50% { opacity: 0.6; }
        }
        
        @keyframes float {
          0%, 100% { transform: translateY(0px); }
          50% { transform: translateY(-20px); }
        }
      `}</style>
    </div>
  )
}
