{"success":true,"content":"'use client'\n\nimport { useState, useEffect } from 'react'\nimport { supabase } from '@/app/lib/supabase'\nimport Link from 'next/link'\nimport { ArrowLeft, Sparkles, Heart, BookOpen, Users, MessageSquare, Filter, Calendar, ChevronRight, Eye, Lightbulb, Zap, Link as LinkIcon, Compass, Cross, Church, Flower, Star, Check } from 'lucide-react'\nimport { format, parseISO, isWithinInterval, subMonths, differenceInDays } from 'date-fns'\nimport { fr } from 'date-fns/locale'\n\nimport ConstellationView from '@/app/components/ConstellationView'\n\nexport default function RelecturePage() {\n  const [loading, setLoading] = useState(true)\n  const [entries, setEntries] = useState<any[]>([])\n  const [filteredEntries, setFilteredEntries] = useState<any[]>([])\n  const [selectedPeriod, setSelectedPeriod] = useState('3months')\n  const [selectedTypes, setSelectedTypes] = useState<string[]>(['all'])\n  const [showSuggestions, setShowSuggestions] = useState(true)\n  const [expandedEntry, setExpandedEntry] = useState<string | null>(null)\n  const [error, setError] = useState<string | null>(null)\n  const [viewMode, setViewMode] = useState<'chronologique' | 'thematique' | 'consolations' | 'jardin' | 'ensemble' | 'gestion' | 'fleuve' | 'constellation'>('chronologique')\n  const [showLinkModal, setShowLinkModal] = useState(false)\n  const [selectedEntryForLink, setSelectedEntryForLink] = useState<any>(null)\n  const [possibleLinks, setPossibleLinks] = useState<any[]>([])\n  const [linkMode, setLinkMode] = useState(false)\n  const [firstSelectedEntry, setFirstSelectedEntry] = useState<any>(null)\n  const [spiritualLinks, setSpiritualLinks] = useState<any[]>([])\n  const [hoveredEntry, setHoveredEntry] = useState<any>(null)\n  const [showContextMenu, setShowContextMenu] = useState<{x: number, y: number, entry: any} | null>(null)\n  const [showDetailModal, setShowDetailModal] = useState<any>(null)\n\n  useEffect(() => {\n    loadAllEntries()\n  }, [])\n\n  useEffect(() => {\n    filterEntries()\n  }, [entries, selectedPeriod, selectedTypes])\n\n  async function loadAllEntries() {\n    try {\n      const { data: { user } } = await supabase.auth.getUser()\n      if (!user) return\n\n      const [graces, prieres, ecritures, paroles, rencontres] = await Promise.all([\n        supabase.from('graces').select('*').eq('user_id', user.id),\n        supabase.from('prieres').select('*').eq('user_id', user.id),\n        supabase.from('paroles_ecriture').select('*').eq('user_id', user.id),\n        supabase.from('paroles_connaissance').select('*').eq('user_id', user.id),\n        supabase.from('rencontres_missionnaires').select('*').eq('user_id', user.id)\n      ])\n\n      const allEntries = [\n        ...(graces.data || []).map(g => ({ ...g, type: 'grace', date: g.date })),\n        ...(prieres.data || []).map(p => ({ ...p, type: 'priere', date: p.date })),\n        ...(ecritures.data || []).map(e => ({ ...e, type: 'ecriture', date: e.date_reception })),\n        ...(paroles.data || []).map(p => ({ ...p, type: 'parole', date: p.date })),\n        ...(rencontres.data || []).map(r => ({ ...r, type: 'rencontre', date: r.date }))\n      ].sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())\n\n      \n      \n      // Charger aussi les liens spirituels\n      const { data: liens } = await supabase\n        .from('liens_spirituels')\n        .select('*')\n        .eq('user_id', user.id)\n      \n      // Ajouter le nombre de liens √† chaque entr√©e\n      allEntries.forEach(entry => {\n        entry.linksCount = (liens || []).filter(l => \n          (l.element_source_id === entry.id && l.element_source_type === entry.type) ||\n          (l.element_cible_id === entry.id && l.element_cible_type === entry.type)\n        ).length\n      })\n      \n      setEntries(allEntries)\n\n      // Charger les liens spirituels\n      const { data: liensData } = await supabase\n        .from('liens_spirituels')\n        .select('*')\n        .eq('user_id', user.id)\n      \n      setSpiritualLinks(liensData || [])    } catch (error) {\n      console.error('Erreur lors du chargement:', error)\n      setError('Erreur lors du chargement des donn√©es')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  function filterEntries() {\n    let filtered = [...entries]\n\n    // Filtre par p√©riode\n    const periodMap: Record<string, number | null> = {\n      '1week': 7,\n      '1month': 30,\n      '3months': 90,\n      '6months': 180,\n      '1year': 365,\n      'all': null\n    }\n\n    if (periodMap[selectedPeriod]) {\n      const startDate = new Date()\n      startDate.setDate(startDate.getDate() - periodMap[selectedPeriod])\n      filtered = filtered.filter(e => new Date(e.date) >= startDate)\n    }\n\n    // Filtre par type\n    if (!selectedTypes.includes('all')) {\n      filtered = filtered.filter(e => selectedTypes.includes(e.type))\n    }\n\n    setFilteredEntries(filtered)\n  }\n\n  const getTypeConfig = (type: string) => {\n    const configs: Record<string, any> = {\n      grace: { emoji: \"‚ú®\", icon: Sparkles, color: '#FCD34D', gradient: 'linear-gradient(135deg, #FEF3C7, #FDE68A)', label: 'Gr√¢ce' },\n      priere: { emoji: \"üôè\", emoji: \"‚ù§Ô∏è\", color: '#818CF8', gradient: 'linear-gradient(135deg, #E0E7FF, #C7D2FE)', label: 'Pri√®re' },\n      ecriture: { emoji: \"üìñ\", icon: BookOpen, color: '#34D399', gradient: 'linear-gradient(135deg, #D1FAE5, #A7F3D0)', label: '√âcriture' },\n      parole: { emoji: \"üïäÔ∏è\", icon: MessageSquare, color: '#60A5FA', gradient: 'linear-gradient(135deg, #E0F2FE, #BAE6FD)', label: 'Parole' },\n      rencontre: { emoji: \"ü§ù\", icon: Users, color: '#F87171', gradient: 'linear-gradient(135deg, #FCE7F3, #FBCFE8)', label: 'Rencontre' }\n    }\n    return configs[type] || { emoji: \"‚ú®\", icon: Sparkles, color: '#6b7280', gradient: 'linear-gradient(135deg, #6b7280, #4b5563)', label: 'Autre' }\n  }\n\n  const getSuggestions = () => {\n    const suggestions = []\n    const now = new Date()\n    \n    // Analyser les patterns\n    const graceCount = filteredEntries.filter(e => e.type === 'grace').length\n    const accomplishedParoles = filteredEntries.filter(e => e.type === 'parole' && e.date_accomplissement).length\n    \n    if (graceCount > 5) {\n      suggestions.push({\n        emoji: \"‚ú®\",\n        text: `${graceCount} gr√¢ces re√ßues sur cette p√©riode. Deo gratias !`,\n        color: '#FCD34D'\n      })\n    }\n    \n    if (accomplishedParoles > 0) {\n      suggestions.push({\n        emoji: \"üïäÔ∏è\",\n        text: `${accomplishedParoles} parole${accomplishedParoles > 1 ? 's' : ''} accomplie${accomplishedParoles > 1 ? 's' : ''}. L'Esprit Saint est √† l'≈ìuvre.`,\n        color: '#60A5FA'\n      })\n    }\n    \n    // Suggestions de suivi - Rappels doux\n    const oldPrayers = entries.filter(e => \n      e.type === 'priere' && \n      differenceInDays(now, new Date(e.date)) > 90\n    )\n    \n    if (oldPrayers.length > 0 && Math.random() < 0.3) { // 30% de chance d'afficher\n      const prayer = oldPrayers[Math.floor(Math.random() * oldPrayers.length)]\n      suggestions.push({\n        emoji: \"üôè\",\n        text: `${prayer.personne_prenom}, pour qui tu as pri√©, traverse peut-√™tre ton esprit aujourd'hui...`,\n        color: '#818CF8',\n        action: 'Prendre des nouvelles'\n      })\n    }\n    \n    // D√©tecter les liens possibles\n    const recentPrayers = filteredEntries.filter(e => e.type === 'priere' && new Date(e.date) > subMonths(now, 1))\n    const recentGraces = filteredEntries.filter(e => e.type === 'grace' && new Date(e.date) > subMonths(now, 1))\n    \n    if (recentPrayers.length > 0 && recentGraces.length > 0) {\n      suggestions.push({\n        icon: LinkIcon,\n        text: \"Certaines pri√®res r√©centes semblent avoir port√© du fruit...\",\n        color: '#D6E5F5',\n        action: 'Discerner les liens'\n      })\n    }\n    \n    // Pattern spirituel d√©tect√©\n    const rencontresWithSimilarContext = entries.filter(e => e.type === 'rencontre').reduce((acc, r) => {\n      acc[r.contexte] = (acc[r.contexte] || 0) + 1\n      return acc\n    }, {})\n    \n    const mostFrequentContext = Object.entries(rencontresWithSimilarContext)\n      .sort(([,a], [,b]) => b - a)[0]\n    \n    if (mostFrequentContext && mostFrequentContext[1] > 3) {\n      suggestions.push({\n        icon: Compass,\n        text: `L'Esprit semble t'envoyer souvent ${mostFrequentContext[0] === 'rue' ? 'dans la rue' : mostFrequentContext[0]}...`,\n        color: '#F87171'\n      })\n    }\n    \n    return suggestions\n  }\n\n  const findPossibleLinks = (entry: any) => {\n    const links = []\n    const entryDate = new Date(entry.date)\n    \n    // Chercher des liens potentiels\n    entries.forEach(e => {\n      if (e.id === entry.id) return\n      \n      const eDate = new Date(e.date)\n      const daysDiff = Math.abs(differenceInDays(entryDate, eDate))\n      \n      // Pri√®re exauc√©e par une gr√¢ce\n      if (entry.type === 'priere' && e.type === 'grace' && daysDiff < 90 && eDate > entryDate) {\n        // V√©rifier si les sujets correspondent\n        const prayerKeywords = entry.sujet?.toLowerCase().split(' ') || []\n        const graceText = (e.texte || '').toLowerCase()\n        const hasMatch = prayerKeywords.some(word => word.length > 3 && graceText.includes(word))\n        \n        if (hasMatch || daysDiff < 30) {\n          links.push({\n            entry: e,\n            type: 'exauce',\n            label: 'Cette pri√®re semble avoir √©t√© exauc√©e dans...',\n            strength: hasMatch ? 'fort' : 'possible',\n            explanation: `Pri√®re du ${format(entryDate, 'dd MMM', { locale: fr })} ‚Üí Gr√¢ce du ${format(eDate, 'dd MMM', { locale: fr })} (${daysDiff} jours apr√®s)`\n          })\n        }\n      }\n      \n      // Parole accomplie dans un √©v√©nement\n      if (entry.type === 'parole' && !entry.date_accomplissement && daysDiff < 180 && eDate > entryDate) {\n        links.push({\n          entry: e,\n          type: 'accomplit',\n          label: 'Cette parole pourrait s\\'√™tre accomplie dans...',\n          strength: 'possible',\n          explanation: `Parole re√ßue il y a ${daysDiff} jours`\n        })\n      }\n      \n      // √âcriture qui √©claire une situation\n      if (entry.type === 'ecriture' && daysDiff < 7) {\n        links.push({\n          entry: e,\n          type: 'eclaire',\n          label: 'Cette Parole de Dieu √©claire peut-√™tre...',\n          strength: 'possible',\n          explanation: `Lecture et √©v√©nement s√©par√©s de ${daysDiff} jour${daysDiff > 1 ? 's' : ''}`\n        })\n      }\n      \n      // Gr√¢ce qui d√©coule d'une pri√®re\n      if (entry.type === 'grace' && e.type === 'priere' && daysDiff < 90 && eDate < entryDate) {\n        links.push({\n          entry: e,\n          type: 'decoule',\n          label: 'Cette gr√¢ce pourrait √™tre le fruit de...',\n          strength: daysDiff < 30 ? 'fort' : 'possible',\n          explanation: `${daysDiff} jours apr√®s la pri√®re`\n        })\n      }\n    })\n    \n    return links.sort((a, b) => {\n      // Trier par force puis par date\n      if (a.strength === 'fort' && b.strength !== 'fort') return -1\n      if (a.strength !== 'fort' && b.strength === 'fort') return 1\n      return 0\n    })\n  }\n\n  const handleLinkClick = (entry: any) => {\n    if (linkMode) {\n      if (!firstSelectedEntry) {\n        setFirstSelectedEntry(entry)\n      } else {\n        // Cr√©er le lien entre les deux entr√©es\n        setSelectedEntryForLink(firstSelectedEntry)\n        setPossibleLinks([{\n          entry: entry,\n          type: 'echo',\n          label: 'Lien cr√©√© manuellement',\n          strength: 'fort',\n          explanation: 'Vous avez identifi√© un lien spirituel'\n        }])\n        setShowLinkModal(true)\n        setLinkMode(false)\n        setFirstSelectedEntry(null)\n      }\n    } else {\n      setSelectedEntryForLink(entry)\n      setShowLinkModal(true)\n    }\n  }\n\n  const saveSpiritualLink = async (fromEntry: Entry, toEntry: Entry, linkType: string, label: string, notes?: string) => {\n    try {\n      const { data: { user } } = await supabase.auth.getUser()\n      if (!user) return\n\n      const { error } = await supabase\n        .from('liens_spirituels')\n        .insert({\n          user_id: user.id,\n          element_source_type: fromEntry.type,\n          element_source_id: fromEntry.id,\n          element_cible_type: toEntry.type,\n          element_cible_id: toEntry.id,\n          type_lien: linkType,\n          description: `${label}${notes ? ' - ' + notes : ''}`\n        })\n\n      if (error) {\n        console.error('Erreur lors de la sauvegarde du lien:', error)\n        alert('Erreur lors de la sauvegarde du lien')\n      } else {\n        alert('Lien spirituel cr√©√© avec succ√®s !')\n        setShowLinkModal(false)\n        loadAllEntries()\n      }\n    } catch (error) {\n      console.error('Erreur:', error)\n    }\n  }\n\n  const getEntryText = (entry: any) => {\n    return entry.texte || entry.description || entry.sujet || entry.reference || \n           (entry.type === 'priere' ? `Pri√®re pour ${entry.personne_prenom}` : 'Entr√©e')\n  }\n\n  const areEntriesLinked = (entry1: any, entry2: any) => {\n    return spiritualLinks.some(link => \n      (link.element_source_id === entry1.id && link.element_source_type === entry1.type &&\n       link.element_cible_id === entry2.id && link.element_cible_type === entry2.type) ||\n      (link.element_source_id === entry2.id && link.element_source_type === entry2.type &&\n       link.element_cible_id === entry1.id && link.element_cible_type === entry1.type)\n    )\n  }\n\n\n\n\n  if (loading) {\n    return (\n      <div style={{\n        minHeight: '100vh',\n        background: '#E0F2FE',\n        padding: '2rem 1rem',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center'\n      }}>\n        <div style={{\n          background: 'white',\n          borderRadius: '1rem',\n          padding: '3rem',\n          boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\n          textAlign: 'center'\n        }}>\n          <Sparkles size={48} style={{ color: '#D6E5F5', margin: '0 auto 1rem', animation: 'pulse 2s ease-in-out infinite' }} />\n          <p style={{ color: '#6b7280' }}>Pr√©paration de votre relecture spirituelle...</p>\n        </div>\n      </div>\n    )\n  }\n\n  const suggestions = getSuggestions()\n\n  return (\n    <div style={{\n      minHeight: '100vh',\n      background: '#E0F2FE',\n      paddingBottom: '4rem'\n    }}>      <div style={{ maxWidth: '1200px', margin: '0 auto', padding: '2rem 1rem' }}>\n        {/* En-t√™te avec fond bleu pastel */}\n        <div style={{\n          background: 'linear-gradient(135deg, #E0F2FE, #D6E5F5)',\n          borderRadius: '1rem',\n          padding: '2rem',\n          marginBottom: '2rem',\n          boxShadow: '0 4px 6px rgba(0, 0, 0, 0.05)'\n        }}>\n          <Link href=\"/dashboard\" style={{\n            display: 'inline-flex',\n            alignItems: 'center',\n            gap: '0.5rem',\n            color: '#4B6BAF',\n            textDecoration: 'none',\n            marginBottom: '1rem',\n            fontSize: '0.875rem',\n            opacity: 0.8,\n            transition: 'opacity 0.2s'\n          }}>\n            <ArrowLeft size={16} />\n            Retour au tableau de bord\n          </Link>\n\n          <div style={{\n            display: 'flex',\n            justifyContent: 'space-between',\n            alignItems: 'center',\n            flexWrap: 'wrap',\n            gap: '1rem'\n          }}>\n            <div>\n              <h1 style={{\n                fontSize: '2rem',\n                fontWeight: 'bold',\n                color: '#4B6BAF',\n                marginBottom: '0.5rem',\n                display: 'flex',\n                alignItems: 'center',\n                gap: '0.5rem'\n              }}>\n                <div style={{ display: 'flex', alignItems: 'center' }}>\n                  <div style={{\n                    background: 'white',\n                    width: '60px',\n                    height: '60px',\n                    borderRadius: '50%',\n                    display: 'flex',\n                    alignItems: 'center',\n                    justifyContent: 'center',\n                    fontSize: '2rem',\n                    boxShadow: '0 2px 4px rgba(0, 0, 0, 0.1)',\n                    marginRight: '1rem'\n                  }}>\n                    üåø\n                  </div>\n                  Relecture spirituelle\n                </div>\n              </h1>\n              <p style={{ color: '#5B7BBF', opacity: 0.9, fontStyle: 'italic' }}>\n                \"Chercher et trouver Dieu en toutes choses\"\n              </p>\n            </div>\n\n            <div style={{\n              display: 'flex',\n              gap: '1rem',\n              alignItems: 'center'\n            }}>\n              <div style={{\n                textAlign: 'center',\n                padding: '0.5rem 1rem',\n                background: 'rgba(255, 255, 255, 0.5)',\n                borderRadius: '0.5rem'\n              }}>\n                <div style={{ fontSize: '1.5rem', fontWeight: 'bold', color: '#4B6BAF' }}>\n                  {entries.length}\n                </div>\n                <div style={{ fontSize: '0.75rem', color: '#5B7BBF' }}>\n                  moments not√©s\n                </div>\n              </div>\n              <div style={{\n                textAlign: 'center',\n                padding: '0.5rem 1rem',\n                background: 'rgba(255, 255, 255, 0.5)',\n                borderRadius: '0.5rem'\n              }}>\n                <div style={{ fontSize: '1.5rem', fontWeight: 'bold', color: '#4B6BAF' }}>\n                  {filteredEntries.length}\n                </div>\n                <div style={{ fontSize: '0.75rem', color: '#5B7BBF' }}>\n                  dans cette p√©riode\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div style={{ maxWidth: '1200px', margin: '0 auto', padding: '2rem 1rem' }}>\n        {/* Barre d'outils */}\n        <div style={{\n          background: 'white',\n          borderRadius: '1rem',\n          padding: '1rem',\n          marginBottom: '1rem',\n          boxShadow: '0 2px 4px rgba(0, 0, 0, 0.1)',\n          display: 'flex',\n          justifyContent: 'space-between',\n          alignItems: 'center'\n        }}>\n          <div style={{ display: 'flex', gap: '0.5rem' }}>\n          <button\n            onClick={() => setViewMode('gestion')}\n            style={{\n              padding: '0.5rem 1rem',\n              borderRadius: '8px',\n              border: 'none',\n              background: viewMode === 'gestion' ? '#7BA7E1' : 'transparent',\n              color: viewMode === 'gestion' ? 'white' : '#6b7280',\n              cursor: 'pointer',\n              display: 'flex',\n              alignItems: 'center',\n              gap: '0.5rem',\n              transition: 'all 0.2s',\n              marginRight: 'auto'\n            }}\n          >\n            üîó\n            Gestion des liens\n          </button>\n\n            <button\n              onClick={() => {\n                setLinkMode(!linkMode)\n                setFirstSelectedEntry(null)\n              }}\n              style={{\n                padding: '0.5rem 1rem',\n                borderRadius: '0.5rem',\n                border: 'none',\n                background: linkMode ? '#7BA7E1' : '#f3f4f6',\n                color: linkMode ? 'white' : '#4b5563',\n                cursor: 'pointer',\n                display: 'flex',\n                alignItems: 'center',\n                gap: '0.5rem',\n                transition: 'all 0.2s'\n              }}\n            >\n              <LinkIcon size={16} />\n              Mode Lien {linkMode && '(actif)'}\n            </button>\n          </div>\n          {linkMode && (\n            <p style={{ fontSize: '0.875rem', color: '#A3C4E8', fontStyle: 'italic' }}>\n              {firstSelectedEntry \n                ? `S√©lectionnez le second √©l√©ment √† relier avec \"${getEntryText(firstSelectedEntry).substring(0, 30)}...\"`\n                : 'Cliquez sur un premier √©l√©ment √† relier'}\n            </p>\n          )}\n        </div>\n\n        {/* Modes de vue */}\n        <div style={{\n          background: 'white',\n          borderRadius: '1rem',\n          padding: '1rem',\n          marginBottom: '2rem',\n          boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\n          display: 'flex',\n          justifyContent: 'center',\n          gap: '0.5rem',\n          flexWrap: 'wrap'\n        }}>\n          <button\n            onClick={() => setViewMode('chronologique')}\n            style={{\n              padding: '0.5rem 1rem',\n              borderRadius: '0.5rem',\n              border: 'none',\n              background: viewMode === 'chronologique' ? '#7BA7E1' : 'transparent',\n              color: viewMode === 'chronologique' ? 'white' : '#6b7280',\n              cursor: 'pointer',\n              display: 'flex',\n              alignItems: 'center',\n              gap: '0.5rem',\n              transition: 'all 0.2s'\n            }}\n          >\n            <Calendar size={16} />\n            Vue chronologique\n          </button>\n          <button\n            onClick={() => setViewMode('thematique')}\n            style={{\n              padding: '0.5rem 1rem',\n              borderRadius: '0.5rem',\n              border: 'none',\n              background: viewMode === 'thematique' ? '#7BA7E1' : 'transparent',\n              color: viewMode === 'thematique' ? 'white' : '#6b7280',\n              cursor: 'pointer',\n              display: 'flex',\n              alignItems: 'center',\n              gap: '0.5rem',\n              transition: 'all 0.2s'\n            }}\n          >\n            <BookOpen size={16} />\n            Vue th√©matique\n          </button>\n          <button\n            onClick={() => setViewMode('consolations')}\n            style={{\n              padding: '0.5rem 1rem',\n              borderRadius: '0.5rem',\n              border: 'none',\n              background: viewMode === 'consolations' ? '#7BA7E1' : 'transparent',\n              color: viewMode === 'consolations' ? 'white' : '#6b7280',\n              cursor: 'pointer',\n              display: 'flex',\n              alignItems: 'center',\n              gap: '0.5rem',\n              transition: 'all 0.2s'\n            }}\n          >\n            <span style={{fontSize: \"16px\"}}>‚ù§Ô∏è</span>\n            Consolations & d√©solations\n          </button>\n          <button\n            onClick={() => setViewMode('jardin')}\n            style={{\n              padding: '0.5rem 1rem',\n              borderRadius: '0.5rem',\n              border: 'none',\n              background: viewMode === 'jardin' ? '#7BA7E1' : 'transparent',\n              color: viewMode === 'jardin' ? 'white' : '#6b7280',\n              cursor: 'pointer',\n              display: 'flex',\n              alignItems: 'center',\n              gap: '0.5rem',\n              transition: 'all 0.2s'\n            }}\n          >\n            <Flower size={16} />\n            Jardin des gr√¢ces\n          </button>\n          \n          \n        </div>\n\n        {/* Filtres √©l√©gants */}\n        <div style={{\n          background: 'white',\n          borderRadius: '1rem',\n          padding: '1.5rem',\n          marginBottom: '2rem',\n          boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)'\n        }}>\n          <div style={{ display: 'flex', alignItems: 'center', gap: '1rem', marginBottom: '1rem' }}>\n            <Filter size={20} style={{ color: '#6b7280' }} />\n            <h3 style={{ fontSize: '1.125rem', fontWeight: '600', color: '#1f2937' }}>Filtrer ma relecture</h3>\n          </div>\n          \n          <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', gap: '1rem' }}>\n            <div>\n              <label style={{ display: 'block', marginBottom: '0.5rem', color: '#6b7280', fontSize: '0.875rem' }}>P√©riode</label>\n              <select \n                className=\"select\"\n                value={selectedPeriod}\n                onChange={(e) => setSelectedPeriod(e.target.value)}\n              >\n                <option value=\"1week\">Cette semaine</option>\n                <option value=\"1month\">Ce mois</option>\n                <option value=\"3months\">3 derniers mois</option>\n                <option value=\"6months\">6 derniers mois</option>\n                <option value=\"1year\">Cette ann√©e</option>\n                <option value=\"all\">Tout voir</option>\n              </select>\n            </div>\n            \n            <div>\n              <label style={{ display: 'block', marginBottom: '0.5rem', color: '#6b7280', fontSize: '0.875rem' }}>Types d'entr√©es</label>\n              <div style={{ display: 'flex', flexWrap: 'wrap', gap: '0.5rem' }}>\n                <button\n                  onClick={() => setSelectedTypes(['all'])}\n                  style={{\n                    padding: '0.5rem 1rem',\n                    borderRadius: '9999px',\n                    border: 'none',\n                    background: selectedTypes.includes('all') ? '#7BA7E1' : '#e5e7eb',\n                    color: selectedTypes.includes('all') ? 'white' : '#6b7280',\n                    cursor: 'pointer',\n                    fontSize: '0.875rem',\n                    transition: 'all 0.2s'\n                  }}\n                >\n                  Tout\n                </button>\n                {['grace', 'priere', 'ecriture', 'parole', 'rencontre'].map(type => {\n                  const config = getTypeConfig(type)\n                  return (\n                    <button\n                      key={type}\n                      onClick={() => {\n                        if (selectedTypes.includes('all')) {\n                          setSelectedTypes([type])\n                        } else if (selectedTypes.includes(type)) {\n                          setSelectedTypes(selectedTypes.filter(t => t !== type))\n                        } else {\n                          setSelectedTypes([...selectedTypes, type])\n                        }\n                      }}\n                      style={{\n                        padding: '0.5rem 1rem',\n                        borderRadius: '9999px',\n                        border: 'none',\n                        background: selectedTypes.includes(type) || selectedTypes.includes('all') ? config.color : '#e5e7eb',\n                        color: selectedTypes.includes(type) || selectedTypes.includes('all') ? 'white' : '#6b7280',\n                        cursor: 'pointer',\n                        fontSize: '0.875rem',\n                        transition: 'all 0.2s'\n                      }}\n                    >\n                      {config.label}\n                    </button>\n                  )\n                })}\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Section \"L'Esprit Saint est √† l'≈ìuvre\" - Plus visible */}\n        {showSuggestions && suggestions.length > 0 && (\n          <div style={{\n            background: 'white',\n            borderRadius: '1rem',\n            marginBottom: '2rem',\n            overflow: 'hidden',\n            boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\n            position: 'relative'\n          }}>\n            {/* En-t√™te color√© */}\n            <div style={{\n              background: 'linear-gradient(135deg, #A3C4E8, #D6E5F5)',\n              padding: '1rem 1.5rem',\n              color: 'white',\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'space-between'\n            }}>\n              <h3 style={{ \n                fontSize: '1.125rem', \n                fontWeight: '600', \n                display: 'flex',\n                alignItems: 'center',\n                gap: '0.5rem',\n                margin: 0\n              }}>\n                <span style={{fontSize: \"20px\"}}>üïäÔ∏è</span>\n                L'Esprit Saint est √† l'≈ìuvre\n              </h3>\n              <button\n                onClick={() => setShowSuggestions(false)}\n                style={{\n                  background: 'none',\n                  border: 'none',\n                  color: 'white',\n                  cursor: 'pointer',\n                  fontSize: '1.25rem',\n                  opacity: 0.8\n                }}\n              >\n                √ó\n              </button>\n            </div>\n            \n            {/* Contenu des suggestions */}\n            <div style={{ padding: '1.5rem' }}>\n              <p style={{ \n                color: '#6b7280', \n                fontSize: '0.875rem', \n                marginBottom: '1rem',\n                fontStyle: 'italic'\n              }}>\n                L'Esprit souffle et r√©v√®le des connexions dans votre vie spirituelle...\n              </p>\n              <div style={{ display: 'flex', flexDirection: 'column', gap: '0.75rem' }}>\n                {suggestions.map((suggestion, index) => {\n                  // Icon remplac√© par emoji\n                  return (\n                    <div \n                      key={index}\n                      style={{\n                        display: 'flex',\n                        alignItems: 'center',\n                        gap: '0.75rem',\n                        padding: '1rem',\n                        background: '#f9fafb',\n                        borderRadius: '0.75rem',\n                        border: '1px solid #e5e7eb',\n                        cursor: suggestion.action ? 'pointer' : 'default',\n                        transition: 'all 0.2s',\n                        ':hover': {\n                          borderColor: suggestion.color,\n                          transform: 'translateY(-1px)'\n                        }\n                      }}\n                      onMouseEnter={(e) => {\n                        e.currentTarget.style.borderColor = suggestion.color\n                        e.currentTarget.style.transform = 'translateY(-1px)'\n                      }}\n                      onMouseLeave={(e) => {\n                        e.currentTarget.style.borderColor = '#e5e7eb'\n                        e.currentTarget.style.transform = 'translateY(0)'\n                      }}\n                    >\n                      <div style={{\n                        background: suggestion.color + '20',\n                        padding: '0.5rem',\n                        borderRadius: '0.5rem',\n                        flexShrink: 0\n                      }}>\n                        <span style={{fontSize: \"20px\", color: suggestion.color}}>{suggestion.emoji || \"‚ú®\"}</span>\n                      </div>\n                      <p style={{ color: '#1f2937', fontSize: '0.875rem', margin: 0, flex: 1 }}>\n                        {suggestion.text}\n                      </p>\n                      {suggestion.action && (\n                        <ChevronRight size={16} style={{ color: '#6b7280', flexShrink: 0 }} />\n                      )}\n                    </div>\n                  )\n                })}\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Timeline spirituelle - Vue chronologique */}\n        {viewMode === 'chronologique' && (\n          <div style={{ position: 'relative' }}>\n            {/* Ligne centrale */}\n            {filteredEntries.length > 0 && (\n              <div style={{\n                position: 'absolute',\n                left: '50%',\n                top: 0,\n                bottom: 0,\n                width: '2px',\n                background: 'linear-gradient(to bottom, #e5e7eb, #A3C4E8, #e5e7eb)',\n                transform: 'translateX(-50%)'\n              }} />\n            )}\n\n            {/* Entr√©es */}\n            {filteredEntries.map((entry, index) => {\n              const config = getTypeConfig(entry.type)\n              const Icon = config.icon\n              const isExpanded = expandedEntry === entry.id\n              const isLeft = index % 2 === 0\n              const isSelected = firstSelectedEntry?.id === entry.id\n\n              return (\n                <div\n                  key={entry.id}\n                  style={{\n                    display: 'flex',\n                    justifyContent: isLeft ? 'flex-end' : 'flex-start',\n                    marginBottom: '2rem',\n                    position: 'relative'\n                  }}\n                >\n                  {/* Connecteur */}\n                  <div style={{\n                    position: 'absolute',\n                    left: '50%',\n                    top: '2rem',\n                    width: '20px',\n                    height: '20px',\n                    background: config.gradient,\n                    borderRadius: '50%',\n                    transform: 'translate(-50%, -50%)',\n                    boxShadow: '0 0 0 4px white, 0 0 0 6px ' + config.color + '30',\n                    zIndex: 1\n                  }} />\n\n                  {/* Carte */}\n                  <div \n                    style={{\n                      width: '45%',\n                      background: 'white',\n                      borderRadius: '1rem',\n                      padding: '1.5rem',\n                      boxShadow: isSelected ? `0 0 0 3px ${config.color}40` : '0 4px 6px rgba(0, 0, 0, 0.1)',\n                      cursor: 'pointer',\n                      transition: 'all 0.3s',\n                      transform: isExpanded ? 'scale(1.02)' : 'scale(1)',\n                      marginRight: isLeft ? '2.5rem' : '0',\n                      marginLeft: isLeft ? '0' : '2.5rem'\n                    }}\n                    onClick={() => {\n                      if (linkMode) {\n                        handleLinkClick(entry)\n                      } else {\n                        setExpandedEntry(isExpanded ? null : entry.id)\n                      }\n                    }}\n                  >\n                    <div style={{ display: 'flex', alignItems: 'start', gap: '1rem' }}>\n                      <div style={{\n                        background: config.gradient,\n                        padding: '0.75rem',\n                        borderRadius: '0.75rem',\n                        color: 'white',\n                        flexShrink: 0\n                      }}>\n                        <span style={{fontSize: \"20px\"}}>{config.emoji}</span>\n                      </div>\n                      \n                      <div style={{ flex: 1 }}>\n                        <div style={{ \n                          display: 'flex', \n                          justifyContent: 'space-between', \n                          alignItems: 'start',\n                          marginBottom: '0.5rem'\n                        }}>\n                          <h4 style={{ \n                            color: '#1f2937', \n                            fontWeight: '600',\n                            fontSize: '1rem'\n                          }}>\n                            {config.label}\n                          </h4>\n                          <time style={{ \n                            fontSize: '0.75rem', \n                            color: '#6b7280' \n                          }}>\n                            {format(parseISO(entry.date), 'dd MMM', { locale: fr })}\n                          </time>\n                        </div>\n                        \n                        <p style={{ \n                          color: '#4b5563',\n                          fontSize: '0.875rem',\n                          lineHeight: '1.5',\n                          marginBottom: isExpanded ? '1rem' : '0',\n                          display: '-webkit-box',\n                          WebkitLineClamp: isExpanded ? 'none' : 2,\n                          WebkitBoxOrient: 'vertical',\n                          overflow: 'hidden'\n                        }}>\n                          {getEntryText(entry)}\n                        </p>\n                        \n                        {isExpanded && (\n                          <div style={{\n                            borderTop: '1px solid #e5e7eb',\n                            paddingTop: '1rem',\n                            marginTop: '1rem'\n                          }}>\n                            {entry.lieu && (\n                              <p style={{ fontSize: '0.875rem', color: '#6b7280', marginBottom: '0.5rem' }}>\n                                üìç {entry.lieu}\n                              </p>\n                            )}\n                            {entry.tags && entry.tags.length > 0 && (\n                              <div style={{ display: 'flex', flexWrap: 'wrap', gap: '0.25rem', marginBottom: '0.5rem' }}>\n                                {entry.tags.map((tag: string, i: number) => (\n                                  <span \n                                    key={i}\n                                    style={{\n                                      background: config.color + '20',\n                                      color: config.color,\n                                      padding: '0.125rem 0.5rem',\n                                      borderRadius: '9999px',\n                                      fontSize: '0.75rem'\n                                    }}\n                                  >\n                                    {tag}\n                                  </span>\n                                ))}\n                              </div>\n                            )}\n                            <div style={{ display: 'flex', gap: '0.5rem', marginTop: '0.5rem' }}>\n                              <Link\n                                href={`/${entry.type}s/${entry.id}`}\n                                style={{\n                                  display: 'inline-flex',\n                                  alignItems: 'center',\n                                  gap: '0.25rem',\n                                  color: config.color,\n                                  fontSize: '0.875rem',\n                                  textDecoration: 'none'\n                                }}\n                              >\n                                <Eye size={14} />\n                                Voir le d√©tail\n                              </Link>\n                              <button\n                                onClick={(e) => {\n                                  e.stopPropagation()\n                                  setSelectedEntryForLink(entry)\n                                  setShowLinkModal(true)\n                                }}\n                                style={{\n                                  display: 'inline-flex',\n                                  alignItems: 'center',\n                                  gap: '0.25rem',\n                                  color: '#D6E5F5',\n                                  fontSize: '0.875rem',\n                                  background: 'none',\n                                  border: 'none',\n                                  cursor: 'pointer',\n                                  padding: '0.25rem 0.5rem',\n                                  borderRadius: '0.25rem',\n                                  transition: 'background 0.2s'\n                                }}\n                              >\n                                <LinkIcon size={14} />\n                                Relier\n                              </button>\n                            </div>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              )\n            })}\n          </div>\n        )}\n\n        {/* Vue th√©matique */}\n        {viewMode === 'thematique' && (\n          <div style={{\n            display: 'grid',\n            gridTemplateColumns: 'repeat(auto-fill, minmax(350px, 1fr))',\n            gap: '2rem'\n          }}>\n            {['grace', 'priere', 'ecriture', 'parole', 'rencontre'].map(type => {\n              const config = getTypeConfig(type)\n              const Icon = config.icon\n              const typeEntries = filteredEntries.filter(e => e.type === type)\n              \n              if (typeEntries.length === 0) return null\n              \n              return (\n                <div\n                  key={type}\n                  style={{\n                    background: 'white',\n                    borderRadius: '1rem',\n                    overflow: 'hidden',\n                    boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)'\n                  }}\n                >\n                  <div style={{\n                    background: config.gradient,\n                    padding: '1.5rem',\n                    color: 'white'\n                  }}>\n                    <h3 style={{\n                      fontSize: '1.25rem',\n                      fontWeight: 'bold',\n                      display: 'flex',\n                      alignItems: 'center',\n                      gap: '0.5rem'\n                    }}>\n                      <span style={{fontSize: \"24px\"}}>{config.emoji}</span>\n                      {config.label}s ({typeEntries.length})\n                    </h3>\n                  </div>\n                  <div style={{ padding: '1rem', maxHeight: '400px', overflow: 'auto' }}>\n                    {typeEntries.slice(0, 5).map(entry => {\n                      const isSelected = firstSelectedEntry?.id === entry.id\n                      return (\n                        <div\n                          key={entry.id}\n                          style={{\n                            padding: '0.75rem',\n                            borderBottom: '1px solid #e5e7eb',\n                            cursor: 'pointer',\n                            transition: 'all 0.2s',\n                            background: isSelected ? config.color + '10' : 'transparent',\n                            borderLeft: isSelected ? `4px solid ${config.color}` : '4px solid transparent'\n                          }}\n                          onClick={() => handleLinkClick(entry)}\n                        >\n                          <p style={{\n                            fontSize: '0.875rem',\n                            color: '#4b5563',\n                            marginBottom: '0.25rem',\n                            overflow: 'hidden',\n                            textOverflow: 'ellipsis',\n                            whiteSpace: 'nowrap'\n                          }}>\n                            {getEntryText(entry)}\n                          </p>\n                          <time style={{ fontSize: '0.75rem', color: '#9ca3af' }}>\n                            {format(parseISO(entry.date), 'dd MMM yyyy', { locale: fr })}\n                          </time>\n                        </div>\n                      )\n                    })}\n                    {typeEntries.length > 5 && (\n                      <p style={{\n                        textAlign: 'center',\n                        padding: '0.75rem',\n                        color: '#6b7280',\n                        fontSize: '0.875rem'\n                      }}>\n                        Et {typeEntries.length - 5} autres...\n                      </p>\n                    )}\n                  </div>\n                </div>\n              )\n            })}\n          </div>\n        )}\n\n        {/* Vue Consolations & D√©solations */}\n        {viewMode === 'consolations' && (\n          <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '2rem' }}>\n            {/* Consolations */}\n            <div style={{\n              background: 'white',\n              borderRadius: '1rem',\n              padding: '2rem',\n              boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)'\n            }}>\n              <h3 style={{\n                fontSize: '1.5rem',\n                fontWeight: 'bold',\n                color: '#10b981',\n                marginBottom: '1rem',\n                display: 'flex',\n                alignItems: 'center',\n                gap: '0.5rem'\n              }}>\n                <span style={{fontSize: \"24px\"}}>‚ù§Ô∏è</span>\n                Consolations\n              </h3>\n              <p style={{ color: '#6b7280', marginBottom: '1rem' }}>\n                Moments o√π j'ai senti la pr√©sence de Dieu\n              </p>\n              <div style={{ display: 'flex', flexDirection: 'column', gap: '1rem' }}>\n                {filteredEntries\n                  .filter(e => e.type === 'grace' || (e.type === 'parole' && e.date_accomplissement))\n                  .slice(0, 5)\n                  .map(entry => {\n                    const config = getTypeConfig(entry.type)\n                    const Icon = config.icon\n                    const isSelected = firstSelectedEntry?.id === entry.id\n                    return (\n                      <div\n                        key={entry.id}\n                        style={{\n                          border: '2px solid',\n                          borderColor: isSelected ? config.color : '#d1fae5',\n                          borderRadius: '0.5rem',\n                          padding: '1rem',\n                          cursor: 'pointer',\n                          transition: 'all 0.2s',\n                          background: isSelected ? config.color + '10' : 'white'\n                        }}\n                        onClick={() => handleLinkClick(entry)}\n                      >\n                        <div style={{ display: 'flex', alignItems: 'start', gap: '0.5rem' }}>\n                          <span style={{fontSize: \"16px\",  color: config.color, marginTop: '2px' }}>{config.emoji}</span>\n                          <div style={{ flex: 1 }}>\n                            <p style={{ fontSize: '0.875rem', color: '#4b5563' }}>\n                              {getEntryText(entry)}\n                            </p>\n                            <time style={{ fontSize: '0.75rem', color: '#9ca3af' }}>\n                              {format(parseISO(entry.date), 'dd MMM', { locale: fr })}\n                            </time>\n                          </div>\n                        </div>\n                      </div>\n                    )\n                  })}\n              </div>\n            </div>\n\n            {/* D√©solations / Attentes */}\n            <div style={{\n              background: 'white',\n              borderRadius: '1rem',\n              padding: '2rem',\n              boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)'\n            }}>\n              <h3 style={{\n                fontSize: '1.5rem',\n                fontWeight: 'bold',\n                color: '#818CF8',\n                marginBottom: '1rem',\n                display: 'flex',\n                alignItems: 'center',\n                gap: '0.5rem'\n              }}>\n                <Cross size={24} />\n                En attente\n              </h3>\n              <p style={{ color: '#6b7280', marginBottom: '1rem' }}>\n                Pri√®res et paroles en cours\n              </p>\n              <div style={{ display: 'flex', flexDirection: 'column', gap: '1rem' }}>\n                {filteredEntries\n                  .filter(e => e.type === 'priere' || (e.type === 'parole' && !e.date_accomplissement))\n                  .slice(0, 5)\n                  .map(entry => {\n                    const config = getTypeConfig(entry.type)\n                    const Icon = config.icon\n                    const isSelected = firstSelectedEntry?.id === entry.id\n                    return (\n                      <div\n                        key={entry.id}\n                        style={{\n                          border: '2px solid',\n                          borderColor: isSelected ? config.color : '#e0e7ff',\n                          borderRadius: '0.5rem',\n                          padding: '1rem',\n                          cursor: 'pointer',\n                          transition: 'all 0.2s',\n                          background: isSelected ? config.color + '10' : 'white'\n                        }}\n                        onClick={() => handleLinkClick(entry)}\n                      >\n                        <div style={{ display: 'flex', alignItems: 'start', gap: '0.5rem' }}>\n                          <span style={{fontSize: \"16px\",  color: config.color, marginTop: '2px' }}>{config.emoji}</span>\n                          <div style={{ flex: 1 }}>\n                            <p style={{ fontSize: '0.875rem', color: '#4b5563' }}>\n                              {getEntryText(entry)}\n                            </p>\n                            <time style={{ fontSize: '0.75rem', color: '#9ca3af' }}>\n                              {format(parseISO(entry.date), 'dd MMM', { locale: fr })}\n                            </time>\n                          </div>\n                        </div>\n                      </div>\n                    )\n                  })}\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Vue Jardin des gr√¢ces - Avec bulles anim√©es */}\n        \n\n        {/* Vue d'ensemble - Visualisation globale */}\n        {viewMode === 'ensemble' && (\n          <div style={{ marginTop: '2rem' }}>\n            {/* En-t√™te */}\n            <div style={{\n              background: 'linear-gradient(135deg, #E6EDFF 0%, #F0F4FF 50%, #E6EDFF 100%)',\n              borderRadius: '1rem',\n              padding: '1.5rem',\n              marginBottom: '2rem',\n              border: '1px solid #D6E5F5'\n            }}>\n              <h3 style={{ \n                color: '#7BA7E1',\n                marginBottom: '0.5rem',\n                display: 'flex',\n                alignItems: 'center',\n                gap: '0.5rem'\n              }}>\n                üëÅÔ∏è Vue d'ensemble\n              </h3>\n              <p style={{ color: '#6b7280', margin: 0 }}>\n                Visualisez tous vos √©l√©ments spirituels et leurs connexions.\n                {linkMode ? ' Cliquez sur une carte pour cr√©er un lien.' : ' Activez le Mode Lien pour cr√©er des connexions.'}\n              </p>\n            </div>\n\n            {/* Grille de cartes */}\n            <div style={{\n              display: 'grid',\n              gridTemplateColumns: 'repeat(auto-fill, minmax(320px, 1fr))',\n              gap: '1.5rem'\n            }}>\n              {filteredEntries.map(entry => {\n                const config = getTypeConfig(entry.type);\n                const isSource = selectedEntryForLink?.id === entry.id;\n                \n                return (\n                  <div\n                    key={entry.id}\n                    onClick={() => {\n                      if (linkMode) {\n                        handleLinkClick(entry);\n                      }\n                    }}\n                    style={{\n                      background: 'white',\n                      borderRadius: '1rem',\n                      padding: '1.5rem',\n                      boxShadow: '0 2px 8px rgba(0,0,0,0.05)',\n                      border: isSource ? '3px solid #7BA7E1' : (entry.linksCount > 0 ? '2px solid #D6E5F5' : '2px solid transparent'),\n                      cursor: linkMode ? 'pointer' : 'default',\n                      transition: 'all 0.2s',\n                      position: 'relative'\n                    }}\n                  >\n                    {/* Badge nombre de liens */}\n                    {entry.linksCount > 0 && (\n                      <div style={{\n                        position: 'absolute',\n                        top: '0.5rem',\n                        right: '0.5rem',\n                        background: '#7BA7E1',\n                        color: 'white',\n                        borderRadius: '50%',\n                        width: '24px',\n                        height: '24px',\n                        display: 'flex',\n                        alignItems: 'center',\n                        justifyContent: 'center',\n                        fontSize: '0.75rem',\n                        fontWeight: 'bold'\n                      }}>\n                        {entry.linksCount}\n                      </div>\n                    )}\n                    \n                    {/* Contenu avec emoji */}\n                    <div style={{ display: 'flex', gap: '1rem' }}>\n                      <span style={{ fontSize: '2rem' }}>{config.emoji}</span>\n                      <div style={{ flex: 1 }}>\n                        <div style={{\n                          fontSize: '0.75rem',\n                          color: config.color,\n                          textTransform: 'uppercase',\n                          letterSpacing: '0.5px',\n                          marginBottom: '0.25rem'\n                        }}>\n                          {config.label}\n                        </div>\n                        <div style={{ fontWeight: 'bold', marginBottom: '0.5rem' }}>\n                          {getEntryText(entry).substring(0, 50)}...\n                        </div>\n                        <div style={{ fontSize: '0.875rem', color: '#6B7280' }}>\n                          üìÖ {format(parseISO(entry.date || entry.created_at), 'dd MMM yyyy', { locale: fr })}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n\n            {/* Message si aucune entr√©e */}\n            {filteredEntries.length === 0 && (\n              <div style={{\n                textAlign: 'center',\n                padding: '4rem',\n                color: '#9CA3AF'\n              }}>\n                <p>Aucun √©l√©ment trouv√©.</p>\n              </div>\n            )}\n          </div>\n        )}\n\n        {/* Vue Gestion des liens */}\n        {viewMode === 'gestion' && (\n          <div style={{ marginTop: '2rem' }}>\n            {/* En-t√™te */}\n            <div style={{\n              background: 'linear-gradient(135deg, #E6EDFF 0%, #F0F4FF 50%, #E6EDFF 100%)',\n              borderRadius: '1rem',\n              padding: '1.5rem',\n              marginBottom: '2rem',\n              border: '1px solid #D6E5F5'\n            }}>\n              <h3 style={{ \n                color: '#7BA7E1',\n                marginBottom: '0.5rem',\n                display: 'flex',\n                alignItems: 'center',\n                gap: '0.5rem'\n              }}>\n                üîó Gestion des liens spirituels\n              </h3>\n              <p style={{ color: '#6b7280', margin: 0 }}>\n                Visualisez et g√©rez tous les liens entre vos √©l√©ments.\n              </p>\n            </div>\n\n            {/* Liste simplifi√©e */}\n            <div style={{\n              background: 'white',\n              borderRadius: '1rem',\n              padding: '2rem',\n              boxShadow: '0 2px 8px rgba(0,0,0,0.05)'\n            }}>\n              <h4 style={{ marginBottom: '1rem', color: '#374151' }}>\n                Liens existants ({spiritualLinks.length})\n              </h4>\n              \n              {spiritualLinks.length > 0 ? (\n                <div>\n                  {spiritualLinks.slice(0, 5).map((link, idx) => (\n                    <div key={idx} style={{\n                      padding: '1rem',\n                      marginBottom: '0.5rem',\n                      background: '#F9FAFB',\n                      borderRadius: '0.5rem'\n                    }}>\n                      Lien {link.type_lien}\n                    </div>\n                  ))}\n                  {spiritualLinks.length > 5 && (\n                    <p style={{ color: '#6B7280', marginTop: '1rem' }}>\n                      Et {spiritualLinks.length - 5} autres liens...\n                    </p>\n                  )}\n                </div>\n              ) : (\n                <p style={{ color: '#9CA3AF' }}>\n                  Aucun lien cr√©√©. Utilisez le Mode Lien pour commencer.\n                </p>\n              )}\n            </div>\n          </div>\n        )}{viewMode === 'jardin' && (\n          <div style={{\n            display: 'grid',\n            gridTemplateColumns: 'repeat(auto-fill, minmax(200px, 1fr))',\n            gap: '2rem',\n            perspective: '1000px'\n          }}>\n            {filteredEntries.map((entry, index) => {\n              const config = getTypeConfig(entry.type)\n              const Icon = config.icon\n              const delay = index * 0.1\n              const isSelected = firstSelectedEntry?.id === entry.id\n              \n              return (\n                <div\n                  key={entry.id}\n                  style={{\n                    background: 'white',\n                    borderRadius: '50%',\n                    width: '200px',\n                    height: '200px',\n                    padding: '2rem',\n                    boxShadow: isSelected ? `0 0 0 4px ${config.color}` : '0 8px 16px rgba(0, 0, 0, 0.1)',\n                    display: 'flex',\n                    flexDirection: 'column',\n                    alignItems: 'center',\n                    justifyContent: 'center',\n                    textAlign: 'center',\n                    cursor: 'pointer',\n                    transition: 'all 0.3s',\n                    transform: 'rotateY(0deg)',\n                    transformStyle: 'preserve-3d',\n                    animation: `float ${3 + Math.random() * 2}s ease-in-out ${delay}s infinite`,\n                    position: 'relative'\n                  }}\n                  onClick={() => handleLinkClick(entry)}\n                  onMouseEnter={(e) => {\n                    e.currentTarget.style.transform = 'scale(1.1)'\n                  }}\n                  onMouseLeave={(e) => {\n                    e.currentTarget.style.transform = 'scale(1)'\n                  }}\n                >\n                  <div style={{\n                    position: 'absolute',\n                    top: '1rem',\n                    width: '40px',\n                    height: '40px',\n                    background: config.gradient,\n                    borderRadius: '50%',\n                    display: 'flex',\n                    alignItems: 'center',\n                    justifyContent: 'center',\n                    color: 'white'\n                  }}>\n                    <span style={{fontSize: \"20px\"}}>{config.emoji}</span>\n                  </div>\n                  <p style={{\n                    fontSize: '0.875rem',\n                    color: '#4b5563',\n                    marginTop: '2rem',\n                    overflow: 'hidden',\n                    textOverflow: 'ellipsis',\n                    display: '-webkit-box',\n                    WebkitLineClamp: 3,\n                    WebkitBoxOrient: 'vertical'\n                  }}>\n                    {getEntryText(entry)}\n                  </p>\n                  <time style={{\n                    fontSize: '0.75rem',\n                    color: '#9ca3af',\n                    marginTop: 'auto'\n                  }}>\n                    {format(parseISO(entry.date), 'dd MMM', { locale: fr })}\n                  </time>\n                </div>\n              )\n            })}\n          </div>\n        )}\n\n        {/* Vue Fleuve de vie - Am√©lior√©e */}\n        {viewMode === 'fleuve' && (\n          <div>\n            <div style={{\n              background: 'linear-gradient(135deg, #F3E8FF, #D6E5F5)',\n              borderRadius: '1rem',\n              padding: '1.5rem',\n              marginBottom: '2rem',\n              textAlign: 'center'\n            }}>\n              <h3 style={{ color: '#A3C4E8', marginBottom: '0.5rem' }}>Le Fleuve de Vie</h3>\n              <p style={{ color: '#6b7280', fontSize: '0.875rem' }}>\n                Visualisez le cours de votre vie spirituelle, comme un fleuve qui s'√©coule dans le temps.\n                Chaque moment est une goutte d'eau qui rejoint le courant de la gr√¢ce divine.\n              </p>\n            </div>\n\n            <div style={{\n              background: 'white',\n              borderRadius: '1rem',\n              padding: '2rem',\n              minHeight: '500px',\n              position: 'relative',\n              overflow: 'auto'\n            }}>\n              {/* Fleuve ondulant */}\n              <svg\n                style={{\n                  position: 'absolute',\n                  top: 0,\n                  left: 0,\n                  width: '100%',\n                  height: '100%',\n                  zIndex: 0\n                }}\n                viewBox=\"0 0 1200 500\"\n                preserveAspectRatio=\"none\"\n              >\n                <defs>\n                  <linearGradient id=\"fleuveGradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n                    <stop offset=\"0%\" stopColor=\"#D6E5F5\" stopOpacity=\"0.1\" />\n                    <stop offset=\"50%\" stopColor=\"#6366f1\" stopOpacity=\"0.1\" />\n                    <stop offset=\"100%\" stopColor=\"#0ea5e9\" stopOpacity=\"0.1\" />\n                  </linearGradient>\n                </defs>\n                <path\n                  d={`M 0 250 Q 300 ${200 + Math.sin(Date.now() / 1000) * 30} 600 250 T 1200 250`}\n                  fill=\"none\"\n                  stroke=\"url(#fleuveGradient)\"\n                  strokeWidth=\"120\"\n                />\n              </svg>\n              \n              {/* Entr√©es flottantes avec plus d'infos */}\n              {filteredEntries.map((entry, index) => {\n                const config = getTypeConfig(entry.type)\n                const Icon = config.icon\n                const position = (index / (filteredEntries.length - 1 || 1)) * 90 + 5\n                const yOffset = Math.sin(index * 0.8) * 80\n                const isSelected = firstSelectedEntry?.id === entry.id\n                \n                return (\n                  <div\n                    key={entry.id}\n                    style={{\n                      position: 'absolute',\n                      left: `${position}%`,\n                      top: `${50 + yOffset}%`,\n                      transform: 'translate(-50%, -50%)',\n                      background: 'white',\n                      borderRadius: '1rem',\n                      padding: '1.5rem',\n                      boxShadow: isSelected ? `0 0 0 3px ${config.color}40` : '0 4px 6px rgba(0, 0, 0, 0.1)',\n                      cursor: 'pointer',\n                      transition: 'all 0.3s',\n                      zIndex: 1,\n                      minWidth: '200px',\n                      maxWidth: '250px'\n                    }}\n                    onClick={() => handleLinkClick(entry)}\n                    onMouseEnter={(e) => {\n                      e.currentTarget.style.transform = 'translate(-50%, -50%) scale(1.05)'\n                      e.currentTarget.style.zIndex = '10'\n                    }}\n                    onMouseLeave={(e) => {\n                      e.currentTarget.style.transform = 'translate(-50%, -50%) scale(1)'\n                      e.currentTarget.style.zIndex = '1'\n                    }}\n                  >\n                    <div style={{\n                      display: 'flex',\n                      alignItems: 'center',\n                      gap: '0.75rem',\n                      marginBottom: '0.75rem'\n                    }}>\n                      <div style={{\n                        background: config.gradient,\n                        width: '36px',\n                        height: '36px',\n                        borderRadius: '50%',\n                        display: 'flex',\n                        alignItems: 'center',\n                        justifyContent: 'center',\n                        color: 'white',\n                        flexShrink: 0\n                      }}>\n                        <span style={{fontSize: \"18px\"}}>{config.emoji}</span>\n                      </div>\n                      <div>\n                        <p style={{\n                          fontSize: '0.875rem',\n                          fontWeight: '600',\n                          color: config.color,\n                          margin: 0\n                        }}>\n                          {config.label}\n                        </p>\n                        <time style={{\n                          fontSize: '0.75rem',\n                          color: '#6b7280'\n                        }}>\n                          {format(parseISO(entry.date), 'dd MMMM', { locale: fr })}\n                        </time>\n                      </div>\n                    </div>\n                    <p style={{\n                      fontSize: '0.813rem',\n                      color: '#4b5563',\n                      margin: 0,\n                      display: '-webkit-box',\n                      WebkitLineClamp: 2,\n                      WebkitBoxOrient: 'vertical',\n                      overflow: 'hidden',\n                      lineHeight: '1.4'\n                    }}>\n                      {getEntryText(entry)}\n                    </p>\n                  </div>\n                )\n              })}\n            </div>\n          </div>\n        )}\n\n        {/* Vue Constellation */}\n        {viewMode === 'constellation' && (\n          <ConstellationView \n            entries={filteredEntries}\n            links={spiritualLinks}\n            onEntryClick={handleLinkClick}\n            getTypeConfig={getTypeConfig}\n          />\n        )}\n\n\n        {/* Message d'encouragement si vide */}\n        {filteredEntries.length === 0 && (\n          <div style={{\n            background: 'white',\n            borderRadius: '1rem',\n            padding: '4rem 2rem',\n            textAlign: 'center',\n            boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)'\n          }}>\n            <Sparkles size={48} style={{ \n              margin: '0 auto 1rem', \n              color: '#D6E5F5',\n              opacity: 0.5\n            }} />\n            <h3 style={{ fontSize: '1.25rem', marginBottom: '0.5rem', color: '#1f2937' }}>\n              Aucune entr√©e pour cette p√©riode\n            </h3>\n            <p style={{ color: '#6b7280' }}>\n              Ajustez vos filtres ou commencez √† noter les merveilles de Dieu !\n            </p>\n          </div>\n        )}\n\n        {/* Modal de liens spirituels am√©lior√© */}\n        {showLinkModal && selectedEntryForLink && (\n          <div style={{\n            position: 'fixed',\n            top: 0,\n            left: 0,\n            right: 0,\n            bottom: 0,\n            background: 'rgba(0, 0, 0, 0.5)',\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            zIndex: 100,\n            padding: '1rem'\n          }}>\n            <div style={{\n              background: 'white',\n              borderRadius: '1rem',\n              padding: '2rem',\n              maxWidth: '800px',\n              width: '100%',\n              maxHeight: '80vh',\n              overflow: 'auto'\n            }}>\n              <h3 style={{ fontSize: '1.25rem', fontWeight: '600', marginBottom: '1rem' }}>\n                Cr√©er des liens spirituels\n              </h3>\n              \n              {/* √âl√©ment s√©lectionn√© */}\n              <div style={{\n                background: '#f9fafb',\n                borderRadius: '0.5rem',\n                padding: '1rem',\n                marginBottom: '1.5rem'\n              }}>\n                <p style={{ fontSize: '0.875rem', color: '#6b7280', marginBottom: '0.5rem' }}>\n                  √âl√©ment de d√©part :\n                </p>\n                <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>\n                  {(() => {\n                    const config = getTypeConfig(selectedEntryForLink.type)\n                    const Icon = config.icon\n                    return (\n                      <>\n                        <span style={{fontSize: \"16px\",  color: config.color }}>{config.emoji}</span>\n                        <span style={{ fontSize: '0.875rem', color: '#1f2937', fontWeight: '500' }}>\n                          {getEntryText(selectedEntryForLink)}\n                        </span>\n                      </>\n                    )\n                  })()}\n                </div>\n              </div>\n              \n              {/* Onglets */}\n              <div style={{\n                display: 'flex',\n                gap: '1rem',\n                marginBottom: '1.5rem',\n                borderBottom: '2px solid #e5e7eb'\n              }}>\n                <button\n                  onClick={() => setPossibleLinks(findPossibleLinks(selectedEntryForLink))}\n                  style={{\n                    padding: '0.5rem 1rem',\n                    background: 'none',\n                    border: 'none',\n                    borderBottom: '2px solid #A3C4E8',\n                    color: '#A3C4E8',\n                    cursor: 'pointer',\n                    fontWeight: '600'\n                  }}\n                >\n                  Suggestions automatiques\n                </button>\n                <button\n                  onClick={() => setPossibleLinks(entries.filter(e => e.id !== selectedEntryForLink.id).map(e => ({\n                    entry: e,\n                    type: 'echo',\n                    label: 'Cr√©er un lien manuel',\n                    strength: 'manuel',\n                    explanation: ''\n                  })))}\n                  style={{\n                    padding: '0.5rem 1rem',\n                    background: 'none',\n                    border: 'none',\n                    borderBottom: '2px solid transparent',\n                    color: '#6b7280',\n                    cursor: 'pointer'\n                  }}\n                >\n                  Tous les √©l√©ments\n                </button>\n              </div>\n              \n              <p style={{ color: '#6b7280', marginBottom: '1.5rem', fontSize: '0.875rem' }}>\n                L'Esprit Saint tisse des liens entre les √©v√©nements de votre vie. S√©lectionnez un √©l√©ment √† relier :\n              </p>\n              \n              {possibleLinks.length > 0 ? (\n                <div style={{ display: 'flex', flexDirection: 'column', gap: '1rem', maxHeight: '400px', overflow: 'auto' }}>\n                  {possibleLinks.map((link, index) => {\n                    const config = getTypeConfig(link.entry.type)\n                    const Icon = config.icon\n                    \n                    return (\n                      <div\n                        key={index}\n                        style={{\n                          border: '2px solid',\n                          borderColor: link.strength === 'fort' ? config.color : '#e5e7eb',\n                          borderRadius: '0.5rem',\n                          padding: '1rem',\n                          cursor: 'pointer',\n                          transition: 'all 0.2s',\n                          background: link.strength === 'fort' ? config.color + '10' : 'white'\n                        }}\n                        onClick={() => {\n                          // Ici on pourrait sauvegarder le lien dans la base de donn√©es\n                          saveSpiritualLink(selectedEntryForLink, link.entry, link.type, link.label, link.explanation)\n                          setShowLinkModal(false)\n                        }}\n                      >\n                        {link.label && (\n                          <p style={{\n                            fontSize: '0.875rem',\n                            color: '#A3C4E8',\n                            marginBottom: '0.5rem',\n                            fontStyle: 'italic'\n                          }}>\n                            {link.label}\n                          </p>\n                        )}\n                        <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem', marginBottom: '0.5rem' }}>\n                          <span style={{fontSize: \"16px\",  color: config.color }}>{config.emoji}</span>\n                          <span style={{ fontSize: '0.875rem', color: '#4b5563' }}>\n                            {getEntryText(link.entry)}\n                          </span>\n                        </div>\n                        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n                          <time style={{ fontSize: '0.75rem', color: '#9ca3af' }}>\n                            {format(parseISO(link.entry.date), 'dd MMMM yyyy', { locale: fr })}\n                          </time>\n                          {link.explanation && (\n                            <span style={{ fontSize: '0.75rem', color: '#6b7280' }}>\n                              {link.explanation}\n                            </span>\n                          )}\n                        </div>\n                      </div>\n                    )\n                  })}\n                </div>\n              ) : (\n                <p style={{ color: '#6b7280', textAlign: 'center', padding: '2rem' }}>\n                  Aucun lien √©vident pour le moment. Laissez le temps √† l'Esprit Saint de r√©v√©ler les connexions...\n                </p>\n              )}\n              \n              <div style={{\n                display: 'flex',\n                justifyContent: 'flex-end',\n                gap: '1rem',\n                marginTop: '2rem'\n              }}>\n                <button\n                  onClick={() => {\n                    setShowLinkModal(false)\n                    setPossibleLinks([])\n                  }}\n                  style={{\n                    padding: '0.5rem 1rem',\n                    borderRadius: '0.5rem',\n                    border: '2px solid #e5e7eb',\n                    background: 'white',\n                    color: '#6b7280',\n                    cursor: 'pointer'\n                  }}\n                >\n                  Fermer\n                </button>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Citation finale - Psaume uniquement */}\n        <div style={{\n          marginTop: '4rem',\n          padding: '2rem',\n          textAlign: 'center',\n          color: '#6b7280',\n          fontStyle: 'italic'\n        }}>\n          <p style={{ marginBottom: '0.5rem', fontSize: '1.125rem' }}>\n            \"Souviens-toi des merveilles qu'il a faites.\"\n          </p>\n          <p style={{ fontSize: '0.875rem' }}>Psaume 105, 5</p>\n        </div>\n      </div>\n\n      {/* Animation float pour le jardin */}\n      \n      <style jsx global>{`\n        @keyframes glow {\n          0% { box-shadow: 0 0 5px rgba(168, 85, 247, 0.5); }\n          50% { box-shadow: 0 0 20px rgba(168, 85, 247, 0.8), 0 0 30px rgba(168, 85, 247, 0.6); }\n          100% { box-shadow: 0 0 5px rgba(168, 85, 247, 0.5); }\n        }\n        \n        .linked-card {\n          animation: glow 2s ease-in-out infinite;\n        }\n        \n        @keyframes pulse {\n          0%, 100% { opacity: 1; }\n          50% { opacity: 0.6; }\n        }\n        \n        @keyframes float {\n          0%, 100% { transform: translateY(0px); }\n          50% { transform: translateY(-20px); }\n        }\n      `}</style>\n    </div>\n  )\n}\n","filePath":"app/(app)/relecture/page.tsx","timestamp":"2025-06-10T21:36:26.527Z"}